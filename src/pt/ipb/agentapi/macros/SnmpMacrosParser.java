/*
 * File:           SnmpMacrosParser.java
 * Date:           26 de Junho de 2002  14:46
 *
 * @author  rlopes
 * @version generated by NetBeans XML module
 */
package pt.ipb.agentapi.macros;

import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;

/**
 * The class reads XML documents according to specified DTD and translates all
 * related events into SnmpMacrosHandler events.
 * <p>
 * Usage sample:
 * 
 * <pre>
 * 
 *  
 *   
 *       SnmpMacrosParser parser = new SnmpMacrosParser(...);
 *       parser.parse(new InputSource(&quot;...&quot;));
 *    
 *   
 *  
 * </pre>
 * 
 * <p>
 * <b>Warning: </b> the class is machine generated. DO NOT MODIFY
 * </p>
 */
public class SnmpMacrosParser implements ContentHandler {

  private java.lang.StringBuffer buffer;

  private SnmpMacrosHandler handler;

  private java.util.Stack context;

  private EntityResolver resolver;

  /**
   * Creates a parser instance.
   * 
   * @param handler
   *          handler interface implementation (never <code>null</code>
   * @param resolver
   *          SAX entity resolver implementation or <code>null</code>. It is
   *          recommended that it could be able to resolve at least the DTD.
   */
  public SnmpMacrosParser(final SnmpMacrosHandler handler,
      final EntityResolver resolver) {
    this.handler = handler;
    this.resolver = resolver;
    buffer = new StringBuffer(111);
    context = new java.util.Stack();
  }

  /**
   * This SAX interface method is implemented by the parser.
   */
  public final void setDocumentLocator(Locator locator) {
  }

  /**
   * This SAX interface method is implemented by the parser.
   */
  public final void startDocument() throws SAXException {
  }

  /**
   * This SAX interface method is implemented by the parser.
   */
  public final void endDocument() throws SAXException {
  }

  /**
   * This SAX interface method is implemented by the parser.
   */
  public final void startElement(java.lang.String ns, java.lang.String name,
      java.lang.String qname, Attributes attrs) throws SAXException {
    dispatch(true);
    context.push(new Object[] { qname,
        new org.xml.sax.helpers.AttributesImpl(attrs) });
    if ("snmp".equals(name)) {
      handler.start_snmp(attrs);
    } else if ("trap".equals(name)) {
      handler.start_trap(attrs);
    } else if ("inform".equals(name)) {
      handler.start_inform(attrs);
    } else if ("getNext".equals(name)) {
      handler.start_getNext(attrs);
    } else if ("getBulk".equals(name)) {
      handler.start_getBulk(attrs);
    } else if ("get".equals(name)) {
      handler.start_get(attrs);
    } else if ("mib".equals(name)) {
      handler.handle_mib(attrs);
    } else if ("task".equals(name)) {
      handler.start_task(attrs);
    } else if ("property".equals(name)) {
      handler.handle_property(attrs);
    } else if ("varBind".equals(name)) {
      handler.handle_varBind(attrs);
    } else if ("set".equals(name)) {
      handler.start_set(attrs);
    } else if ("response".equals(name)) {
      handler.start_response(attrs);
    } else if ("runTask".equals(name)) {
      handler.handle_runTask(attrs);
    }
  }

  /**
   * This SAX interface method is implemented by the parser.
   */
  public final void endElement(java.lang.String ns, java.lang.String name,
      java.lang.String qname) throws SAXException {
    dispatch(false);
    context.pop();
    if ("snmp".equals(name)) {
      handler.end_snmp();
    } else if ("trap".equals(name)) {
      handler.end_trap();
    } else if ("inform".equals(name)) {
      handler.end_inform();
    } else if ("getNext".equals(name)) {
      handler.end_getNext();
    } else if ("getBulk".equals(name)) {
      handler.end_getBulk();
    } else if ("get".equals(name)) {
      handler.end_get();
    } else if ("task".equals(name)) {
      handler.end_task();
    } else if ("set".equals(name)) {
      handler.end_set();
    } else if ("response".equals(name)) {
      handler.end_response();
    }
  }

  /**
   * This SAX interface method is implemented by the parser.
   */
  public final void characters(char[] chars, int start, int len)
      throws SAXException {
    buffer.append(chars, start, len);
  }

  /**
   * This SAX interface method is implemented by the parser.
   */
  public final void ignorableWhitespace(char[] chars, int start, int len)
      throws SAXException {
  }

  /**
   * This SAX interface method is implemented by the parser.
   */
  public final void processingInstruction(java.lang.String target,
      java.lang.String data) throws SAXException {
  }

  /**
   * This SAX interface method is implemented by the parser.
   */
  public final void startPrefixMapping(final java.lang.String prefix,
      final java.lang.String uri) throws SAXException {
  }

  /**
   * This SAX interface method is implemented by the parser.
   */
  public final void endPrefixMapping(final java.lang.String prefix)
      throws SAXException {
  }

  /**
   * This SAX interface method is implemented by the parser.
   */
  public final void skippedEntity(java.lang.String name) throws SAXException {
  }

  private void dispatch(final boolean fireOnlyIfMixed) throws SAXException {
    if (fireOnlyIfMixed && buffer.length() == 0)
      return; //skip it

    Object[] ctx = (Object[]) context.peek();
    String here = (String) ctx[0];
    Attributes attrs = (Attributes) ctx[1];
    buffer.delete(0, buffer.length());
  }

  /**
   * The recognizer entry method taking an InputSource.
   * 
   * @param input
   *          InputSource to be parsed.
   * @throws java.io.IOException
   *           on I/O error.
   * @throws SAXException
   *           propagated exception thrown by a DocumentHandler.
   * @throws javax.xml.parsers.ParserConfigurationException
   *           a parser satisfining requested configuration can not be created.
   * @throws javax.xml.parsers.FactoryConfigurationRrror
   *           if the implementation can not be instantiated.
   */
  public void parse(final InputSource input) throws SAXException,
      javax.xml.parsers.ParserConfigurationException, java.io.IOException {
    parse(input, this);
  }

  /**
   * The recognizer entry method taking a URL.
   * 
   * @param url
   *          URL source to be parsed.
   * @throws java.io.IOException
   *           on I/O error.
   * @throws SAXException
   *           propagated exception thrown by a DocumentHandler.
   * @throws javax.xml.parsers.ParserConfigurationException
   *           a parser satisfining requested configuration can not be created.
   * @throws javax.xml.parsers.FactoryConfigurationRrror
   *           if the implementation can not be instantiated.
   */
  public void parse(final java.net.URL url) throws SAXException,
      javax.xml.parsers.ParserConfigurationException, java.io.IOException {
    parse(new InputSource(url.toExternalForm()), this);
  }

  /**
   * The recognizer entry method taking an Inputsource.
   * 
   * @param input
   *          InputSource to be parsed.
   * @throws java.io.IOException
   *           on I/O error.
   * @throws SAXException
   *           propagated exception thrown by a DocumentHandler.
   * @throws javax.xml.parsers.ParserConfigurationException
   *           a parser satisfining requested configuration can not be created.
   * @throws javax.xml.parsers.FactoryConfigurationRrror
   *           if the implementation can not be instantiated.
   */
  public static void parse(final InputSource input,
      final SnmpMacrosHandler handler) throws SAXException,
      javax.xml.parsers.ParserConfigurationException, java.io.IOException {
    parse(input, new SnmpMacrosParser(handler, null));
  }

  /**
   * The recognizer entry method taking a URL.
   * 
   * @param url
   *          URL source to be parsed.
   * @throws java.io.IOException
   *           on I/O error.
   * @throws SAXException
   *           propagated exception thrown by a DocumentHandler.
   * @throws javax.xml.parsers.ParserConfigurationException
   *           a parser satisfining requested configuration can not be created.
   * @throws javax.xml.parsers.FactoryConfigurationRrror
   *           if the implementation can not be instantiated.
   */
  public static void parse(final java.net.URL url,
      final SnmpMacrosHandler handler) throws SAXException,
      javax.xml.parsers.ParserConfigurationException, java.io.IOException {
    parse(new InputSource(url.toExternalForm()), handler);
  }

  private static void parse(final InputSource input,
      final SnmpMacrosParser recognizer) throws SAXException,
      javax.xml.parsers.ParserConfigurationException, java.io.IOException {
    javax.xml.parsers.SAXParserFactory factory = javax.xml.parsers.SAXParserFactory
        .newInstance();
    factory.setValidating(false); //the code was generated according DTD
    factory.setNamespaceAware(true); //the code was generated according DTD
    XMLReader parser = factory.newSAXParser().getXMLReader();
    parser.setContentHandler(recognizer);
    parser.setErrorHandler(recognizer.getDefaultErrorHandler());
    if (recognizer.resolver != null)
      parser.setEntityResolver(recognizer.resolver);
    parser.parse(input);
  }

  /**
   * Creates default error handler used by this parser.
   * 
   * @return org.xml.sax.ErrorHandler implementation
   */
  protected ErrorHandler getDefaultErrorHandler() {
    return new ErrorHandler() {
      public void error(SAXParseException ex) throws SAXException {
        if (context.isEmpty())
          System.err.println("Missing DOCTYPE.");
        throw ex;
      }

      public void fatalError(SAXParseException ex) throws SAXException {
        throw ex;
      }

      public void warning(SAXParseException ex) throws SAXException {
        // ignore
      }
    };

  }

}

