/*
 * File: SnmpMacrosHandlerImpl.java Date: 26 de Junho de 2002 14:46
 * 
 * @author rlopes
 * 
 * @version generated by NetBeans XML module
 */
package pt.ipb.agentapi.macros;

import java.io.InputStream;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import pt.ipb.snmp.SnmpConstants;
import pt.ipb.snmp.SnmpProperties;
import pt.ipb.snmp.type.smi.Var;
import pt.ipb.snmp.type.smi.VarBind;

public class XMLTaskReader implements SnmpMacrosHandler, TaskReader {
  public static final String SNMP = "snmp";

  public static final String MIB = "mib";

  public static final String PROPERTY = "property";

  public static final String TASK = "task";

  public static final String GET = "get";

  public static final String GETNEXT = "getNext";

  public static final String GETBULK = "getBulk";

  public static final String SET = "set";

  public static final String INFORM = "inform";

  public static final String RESPONSE = "response";

  public static final String TRAP = "trap";

  public static final String VARBIND = "varBind";

  public static final String RUNTASK = "runTask";

  public static final String VERSION = "version";

  public static final String USER = "user";

  public static final String AUTHPROTO = "authProtocol";

  public static final String AUTHPASS = "authPassword";

  public static final String PRIVPASS = "privPassword";

  public static final String COMMUNITY = "community";

  public static final String WRITECOMMUNITY = "writeCommunity";

  public static final String NAME = "name";

  public static final String LOCATION = "location";

  public static final String VALUE = "value";

  public static final String DESTINATION = "destination";

  public static final String OID = "oid";

  public static final String NONREP = "nonrep";

  public static final String MAXREP = "maxrep";

  public static final String DOCUMENT = "document";

  public static final String TYPE = "type";

  InputStream stream = null;

  Tasks tasks = null;

  Task task = null;

  Op current = null;

  public XMLTaskReader(InputStream s) {
    this.stream = s;
  }

  public void start_snmp(final Attributes attrs) throws SAXException {
    if (tasks == null)
      tasks = new Tasks();
    SnmpProperties props = new SnmpProperties();
    if (attrs.getValue(VERSION) != null) {
      try {
        props.setVersion(Integer.parseInt(attrs.getValue(VERSION)));
      } catch (Exception e) {
        throw new SAXException(e);
      }
    }
    if (attrs.getValue(USER) != null) {
      props.setUser(attrs.getValue(USER));
    }
    if (attrs.getValue(AUTHPROTO) != null) {
      props.setProperty(SnmpProperties.AUTHPROTO, attrs.getValue(AUTHPROTO));
    }
    if (attrs.getValue(AUTHPASS) != null) {
      props.setAuthPass(attrs.getValue(AUTHPASS));
    }
    if (attrs.getValue(PRIVPASS) != null) {
      props.setPrivPass(attrs.getValue(PRIVPASS));
      props.setPrivProto(SnmpConstants.DES);
    }
    if (attrs.getValue(COMMUNITY) != null) {
      props.setCommunity(attrs.getValue(COMMUNITY));
    }
    if (attrs.getValue(WRITECOMMUNITY) != null) {
      props.setWriteCommunity(attrs.getValue(WRITECOMMUNITY));
    }
    tasks.setSnmpProperties(props);
  }

  public void end_snmp() throws SAXException {
  }

  public void start_trap(final Attributes attrs) throws SAXException {
    current = new Trap();
    if (attrs.getValue(VERSION) != null) {
      try {
        ((Trap) current).setVersion(Integer.parseInt(attrs.getValue(VERSION)));
      } catch (Exception e) {
      }
    }

    completeAttrs(current, attrs);
  }

  public void end_trap() throws SAXException {
    task.addOp(current);
  }

  public void start_inform(final Attributes attrs) throws SAXException {
    current = new Inform();
    completeAttrs(current, attrs);
  }

  public void end_inform() throws SAXException {
    task.addOp(current);
  }

  public void start_getNext(final Attributes attrs) throws SAXException {
    current = new GetNext();
    completeAttrs(current, attrs);
  }

  public void end_getNext() throws SAXException {
    task.addOp(current);
  }

  public void start_getBulk(final Attributes attrs) throws SAXException {
    current = new GetBulk();
    if (attrs.getValue(NONREP) != null) {
      try {
        ((GetBulk) current).setNonRep(Integer.parseInt(attrs.getValue(NONREP)));
      } catch (Exception e) {
        throw new SAXException(e);
      }
    }
    if (attrs.getValue(MAXREP) != null) {
      try {
        ((GetBulk) current).setMaxRep(Integer.parseInt(attrs.getValue(MAXREP)));
      } catch (Exception e) {
        throw new SAXException(e);
      }
    }

    completeAttrs(current, attrs);
  }

  public void end_getBulk() throws SAXException {
    task.addOp(current);
  }

  public void start_get(final Attributes attrs) throws SAXException {
    current = new Get();
    completeAttrs(current, attrs);
  }

  public void end_get() throws SAXException {
    task.addOp(current);
  }

  public void handle_mib(final Attributes attrs) throws SAXException {
    try {
      tasks.addMib(new Mib(new java.net.URL(attrs.getValue(LOCATION)), attrs
          .getValue(NAME)));
    } catch (Exception e) {
      throw new SAXException(e);
    }
  }

  public void start_task(final Attributes attrs) throws SAXException {
    task = new Task(attrs.getValue(NAME));
  }

  public void end_task() throws SAXException {
    tasks.addTask(task);
  }

  public void handle_property(final Attributes attrs) throws SAXException {
    tasks
        .addProperty(new Property(attrs.getValue(NAME), attrs.getValue(VALUE)));
  }

  public void handle_varBind(final Attributes attrs) throws SAXException {
    current.addVarBind(getVarBind(attrs));
  }

  public void start_set(final Attributes attrs) throws SAXException {
    current = new Set();
    completeAttrs(current, attrs);
  }

  public void end_set() throws SAXException {
    task.addOp(current);
  }

  public void start_response(final Attributes attrs) throws SAXException {
    current = new Response();
    completeAttrs(current, attrs);
  }

  public void end_response() throws SAXException {
    task.addOp(current);
  }

  public void handle_runTask(final Attributes attrs) throws SAXException {
    try {
      RunTask r = new RunTask(attrs.getValue(NAME), new java.net.URL(attrs
          .getValue(DOCUMENT)));
      task.addOp(r);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public Tasks read() throws Exception {
    SnmpMacrosParser parser = new SnmpMacrosParser(this, null);
    parser.parse(new InputSource(stream));
    return tasks;
  }

  protected void completeAttrs(Op p, Attributes attrs) {
    if (attrs.getValue(DESTINATION) != null) {
      p.setDestination(attrs.getValue(DESTINATION));
    }
    VarBind v = getVarBind(attrs);
    if (v != null)
      p.addVarBind(v);
  }

  protected VarBind getVarBind(Attributes attrs) {
    String name = null;
    String oid = null;
    byte type = SnmpConstants.UNKNOWN;
    String value = null;
    if (attrs.getValue(OID) != null) {
      oid = attrs.getValue(OID);
    } else {
      return null;
    }
    if (attrs.getValue(NAME) != null) {
      name = attrs.getValue(NAME);
    }
    if (attrs.getValue(TYPE) != null) {
      type = SnmpConstants.string2type(attrs.getValue(TYPE));
    }
    if (attrs.getValue(VALUE) != null) {
      value = attrs.getValue(VALUE);
    }
    try {
      VarBind v = new VarBind();
      if (type != SnmpConstants.UNKNOWN) {
        v.setValue(Var.createVar(value, type));
      }
      v.setOID(oid);
      if (name != null)
        v.setName(name);
      return v;
    } catch (NumberFormatException e) {
      e.printStackTrace();
    }
    return null;
  }

  public static void main(String arg[]) {
    try {
      InputStream s = new java.io.FileInputStream(arg[0]);
      XMLTaskReader xml = new XMLTaskReader(s);
      Tasks t = xml.read();
      System.out.println(t.toXML());
      System.out.println("--------------------------------------");
      for (java.util.Iterator i = t.iterator(); i.hasNext();) {
        Op op = (Op) i.next();
        System.out.println(op.toXML());
      }

      /*
       * System.out.println("--------------------------------------");
       * for(Iterator i=t.iterator(); i.hasNext(); ) { Op op = (Op)i.next();
       * i.remove();
       * System.out.println(((Task)t.getTaskList().get(0)).getOpList().size()); }
       */
      TasksResolver resolveTasks = new TasksResolver(t);
      resolveTasks.resolve();
      System.out.println("--------------------------------------");
      for (java.util.Iterator i = resolveTasks.iterator(); i.hasNext();) {
        Op op = (Op) i.next();
        System.out.println(op.toXML());
      }

    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}

