/* Generated By:JavaCC: Do not edit this line. SMIParserTokenManager.java */
package pt.ipb.marser.smi;
import java.util.*;
import pt.ipb.snmp.SnmpConstants;
import pt.ipb.marser.*;
import java.io.File;

public class SMIParserTokenManager implements SMIParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x5ffefeefe0000000L) != 0L || (active1 & 0xfbff77L) != 0L)
         {
            jjmatchedKind = 89;
            return 46;
         }
         if ((active0 & 0xa001011000000000L) != 0L || (active1 & 0x40088L) != 0L)
         {
            jjmatchedKind = 89;
            return 27;
         }
         return -1;
      case 1:
         if ((active0 & 0xa001000000000000L) != 0L || (active1 & 0x40080L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 1;
            return 26;
         }
         if ((active0 & 0x5ffefeffe0000000L) != 0L || (active1 & 0xfbff7fL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 1;
            return 46;
         }
         if ((active0 & 0x10000000000L) != 0L)
            return 46;
         return -1;
      case 2:
         if ((active0 & 0x80000000000L) != 0L)
            return 46;
         if ((active0 & 0xa001000000000000L) != 0L || (active1 & 0x40080L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 2;
            return 25;
         }
         if ((active0 & 0x5ffef6ffe0000000L) != 0L || (active1 & 0xfbff7fL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 2;
            return 46;
         }
         return -1;
      case 3:
         if ((active0 & 0x420080000000L) != 0L)
            return 46;
         if ((active0 & 0xa001000000000000L) != 0L || (active1 & 0x40080L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 3;
            return 24;
         }
         if ((active1 & 0x300L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 2;
            }
            return 10;
         }
         if ((active0 & 0x5ffeb4ff60000000L) != 0L || (active1 & 0xfbfc7fL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 3;
            return 46;
         }
         return -1;
      case 4:
         if ((active1 & 0x804L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 3;
            }
            return 10;
         }
         if ((active0 & 0x1020040000000000L) != 0L || (active1 & 0x800400L) != 0L)
            return 46;
         if ((active0 & 0xa001000000000000L) != 0L || (active1 & 0x40080L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 4;
            return 12;
         }
         if ((active0 & 0x4fdeb0ff60000000L) != 0L || (active1 & 0x7bf37bL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 4;
            return 46;
         }
         return -1;
      case 5:
         if ((active0 & 0x446001000000000L) != 0L || (active1 & 0x20c002L) != 0L)
            return 46;
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x400000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 4;
            }
            return 10;
         }
         if ((active0 & 0xa001000000000000L) != 0L || (active1 & 0x40080L) != 0L)
            return 13;
         if ((active0 & 0xb98b0ef60000000L) != 0L || (active1 & 0x1b3b7dL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 5;
            }
            return 46;
         }
         return -1;
      case 6:
         if ((active0 & 0x1000000000000L) != 0L || (active1 & 0x240082L) != 0L)
            return 10;
         if ((active0 & 0x8100a00440000000L) != 0L)
            return 46;
         if ((active0 & 0x4a9810eb20000000L) != 0L || (active1 & 0x5b3b7dL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 6;
            return 46;
         }
         return -1;
      case 7:
         if ((active0 & 0x280000000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 6;
            }
            return 10;
         }
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x10021L) != 0L)
            return 46;
         if ((active0 & 0x4819106b20000000L) != 0L || (active1 & 0x7e3bceL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
            return 46;
         }
         return -1;
      case 8:
         if ((active0 & 0x10002b20000000L) != 0L || (active1 & 0x2800L) != 0L)
            return 46;
         if ((active0 & 0x4a89104000000000L) != 0L || (active1 & 0x7e13deL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
            return 46;
         }
         return -1;
      case 9:
         if ((active0 & 0x4000000000L) != 0L || (active1 & 0x1300L) != 0L)
            return 46;
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 8;
            }
            return 10;
         }
         if ((active0 & 0x4289100000000000L) != 0L || (active1 & 0x7e00deL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 9;
            return 46;
         }
         return -1;
      case 10:
         if ((active0 & 0x9100000000000L) != 0L || (active1 & 0x20000L) != 0L)
            return 46;
         if ((active0 & 0x4a80000000000000L) != 0L || (active1 & 0x7c00deL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 10;
            return 46;
         }
         return -1;
      case 11:
         if ((active0 & 0x4080000000000000L) != 0L || (active1 & 0x4001cL) != 0L)
            return 46;
         if ((active0 & 0xa00000000000000L) != 0L || (active1 & 0x7800c2L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 11;
            return 46;
         }
         return -1;
      case 12:
         if ((active0 & 0xa00000000000000L) != 0L || (active1 & 0x600082L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 12;
            return 46;
         }
         if ((active1 & 0x100000L) != 0L)
            return 46;
         if ((active1 & 0x80040L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 11;
            }
            return 10;
         }
         return -1;
      case 13:
         if ((active0 & 0xa00000000000000L) != 0L || (active1 & 0x6800c2L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 13;
            return 46;
         }
         return -1;
      case 14:
         if ((active0 & 0xa00000000000000L) != 0L || (active1 & 0x680040L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 14;
            return 46;
         }
         if ((active1 & 0x82L) != 0L)
            return 46;
         return -1;
      case 15:
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x680040L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 15;
            return 46;
         }
         if ((active0 & 0x800000000000000L) != 0L)
            return 46;
         return -1;
      case 16:
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x480000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 16;
            return 46;
         }
         if ((active1 & 0x200040L) != 0L)
            return 46;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 19);
      case 41:
         return jjStopAtPos(0, 20);
      case 44:
         return jjStopAtPos(0, 16);
      case 45:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 46:
         return jjStopAtPos(0, 15);
      case 48:
         return jjStopAtPos(0, 14);
      case 58:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 27);
      case 60:
         return jjStopAtPos(0, 23);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x424001L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x40080000000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x2200000000L, 0x8010L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0xc8100000000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x880000000000L, 0x1000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x1000000400000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x120200160000000L, 0x10000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0xc00000000000000L, 0xa00302L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180040L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0xa001011000000000L, 0x40088L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x20L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x6028000000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x200000800000000L, 0x800L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x400L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 21);
      case 93:
         return jjStopAtPos(0, 22);
      case 123:
         return jjStopAtPos(0, 17);
      case 124:
         return jjStopAtPos(0, 26);
      case 125:
         return jjStopAtPos(0, 18);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 58:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x802104L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0xa001000000000000L, active1, 0x40080L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x258148000000000L, active1, 0x20L);
      case 70:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 46);
         break;
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x80020080000000L, active1, 0x200L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x100200000000000L, active1, 0x10000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x20080040000000L, active1, 0x1400L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x380052L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000400000000000L, active1, 0x808L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4020000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2200000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x1100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(2, 25);
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000100000000L, active1, 0x800L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x804000L);
      case 68:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0x420000000000000L, active1, 0x200002L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x50100000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0x9L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x400L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0xa001000000000000L, active1, 0x40080L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x802000000000000L, active1, 0x210L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000400000000000L, active1, 0x8000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x100a00000000000L, active1, 0x30000L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x88000000000000L, active1, 0x4L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000L, active1, 0x181040L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x100L);
      case 90:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x2600000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x300L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0xa031000040000000L, active1, 0x45080L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x140000000000L, active1, 0x18a060L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0x30000L);
      case 77:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0xa00000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x800L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000L);
      case 83:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 46);
         break;
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x4206000000000000L, active1, 0x414L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x1400008000000000L, active1, 0x200002L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x820000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2200000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x804L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x842000000000000L, active1, 0x2310L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0xa001000000000000L, active1, 0x48080L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000008000000000L, active1, 0x1L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x180040L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0x30000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x480000000000000L, active1, 0x200002L);
      case 78:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0x8L);
      case 79:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 46);
         break;
      case 80:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 46);
         break;
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x18a00000000000L, active1, 0x1000L);
      case 83:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4020L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0x400000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x204000000000000L, active1, 0L);
      case 88:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 46);
         break;
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x4020000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2200000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x400000L);
      case 51:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x280000000000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x30310L);
      case 69:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x110000040000000L, active1, 0x200002L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x8100000000000L, active1, 0x180068L);
      case 76:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 46);
         break;
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0x1L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L);
      case 83:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 46);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 46);
         break;
      case 84:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8801a00000000000L, active1, 0x40880L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
      case 88:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 46);
         break;
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x2220000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L, active1, 0x240082L);
      case 50:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 46);
         break;
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0x580340L);
      case 68:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 46);
         break;
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0x2000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0x20L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0x4L);
      case 82:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 46);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 83:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 46);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 46);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0x11L);
      case 89:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0x800L);
      case 90:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x4100000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x2220000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x280000000000000L, active1, 0x10L);
      case 51:
         return jjMoveStringLiteralDfa8_0(active0, 0x220000000L, active1, 0L);
      case 54:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x580048L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0x200000L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4L);
      case 69:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 46);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2300L);
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0x1082L);
      case 78:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 46);
         break;
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L);
      case 83:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 64, 46);
         break;
      case 84:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 80, 46);
         return jjMoveStringLiteralDfa8_0(active0, 0x9000000000000L, active1, 0x20000L);
      case 89:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 29, 46);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 46);
         break;
      case 51:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L, active1, 0L);
      case 52:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 37, 46);
         break;
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x82L);
      case 69:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 52, 46);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 75, 46);
         break;
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0x20010L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L, active1, 0x200000L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000L);
      case 83:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 77, 46);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1300L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x180048L);
      case 89:
         return jjMoveStringLiteralDfa9_0(active0, 0x801000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 32, 46);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 35, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L, active1, 0L);
      case 50:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 38, 46);
         break;
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000L);
      case 69:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 76, 46);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x82L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L, active1, 0x180048L);
      case 77:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L, active1, 0x10L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x208000000000000L, active1, 0x60000L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L, active1, 0L);
      case 83:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 72, 46);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(9, 73, 46);
         break;
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000L);
      case 69:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 48, 46);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4L);
      case 70:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10L);
      case 71:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 51, 46);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(10, 81, 46);
         return jjMoveStringLiteralDfa11_0(active0, 0x280000000000000L, active1, 0x82L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x180048L);
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000L);
      case 83:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 44, 46);
         break;
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 68:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(11, 66, 46);
         break;
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400000L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000L);
      case 78:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(11, 67, 46);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x180040L);
      case 79:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(11, 68, 46);
         break;
      case 80:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(11, 82, 46);
         break;
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000000L, active1, 0L);
      case 84:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 55, 46);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x82L);
      case 86:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000000L, active1, 0L);
      case 88:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 62, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80040L);
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200082L);
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400000L);
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000000L, active1, 0L);
      case 83:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(12, 84, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200000L);
      case 71:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x80000L);
      case 73:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x400000L);
      case 78:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0xc2L);
      case 85:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x200000L);
      case 80:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x80000L);
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000000000L, active1, 0x400000L);
      case 89:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(14, 65, 46);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(14, 71, 46);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x200000L);
      case 73:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000000000L, active1, 0x400000L);
      case 79:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x80000L);
      case 80:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x40L);
      case 83:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 59, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(16, 70, 46);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(16, 85, 46);
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x400000L);
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0x200000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 57, 46);
         break;
      case 80:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(17, 83, 46);
         break;
      case 83:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(17, 86, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 46;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(10);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if ((0x100002600L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 45)
                     jjCheckNAdd(10);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(10);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(10);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(10);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(10);
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(10);
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 12)
                     kind = 12;
                  break;
               case 3:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 45)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 9:
                  if (curChar == 45)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 29:
                  if ((0x100002600L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 39:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 3);
                  break;
               case 40:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 46:
               case 10:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 12:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  if (curChar == 84)
                     jjAddStates(4, 5);
                  break;
               case 26:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  if (curChar == 74)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 24:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 0:
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAddTwoStates(6, 7);
                  }
                  if (curChar == 79)
                     jjAddStates(6, 7);
                  break;
               case 27:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 1:
                  jjAddStates(8, 9);
                  break;
               case 5:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 8:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
                  if (curChar == 79)
                     jjAddStates(6, 7);
                  break;
               case 14:
                  if (curChar == 82 && kind > 8)
                     kind = 8;
                  break;
               case 15:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 28:
                  if (curChar == 84)
                     jjAddStates(10, 11);
                  break;
               case 30:
                  if (curChar == 71 && kind > 9)
                     kind = 9;
                  break;
               case 31:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 37:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 42:
                  if ((0x400000004L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(12, 13);
                  break;
               case 45:
                  if ((0x10000000100L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(8, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 46 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(1, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if (curChar == 45 && kind > 6)
                     kind = 6;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   40, 41, 43, 44, 13, 23, 27, 38, 1, 2, 29, 35, 43, 44, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\60", "\56", "\54", "\173", "\175", "\50", "\51", "\133", "\135", "\74", 
"\55", "\72\72\75", "\174", "\73", "\72", "\111\156\164\145\147\145\162\63\62", 
"\111\116\124\105\107\105\122", "\102\111\124\123", "\111\160\101\144\144\162\145\163\163", 
"\103\157\165\156\164\145\162\63\62", "\107\141\165\147\145\63\62", "\124\151\155\145\124\151\143\153\163", 
"\117\160\141\161\165\145", "\103\157\165\156\164\145\162\66\64", 
"\125\156\163\151\147\156\145\144\63\62", "\123\105\121\125\105\116\103\105", "\117\106", "\123\111\132\105", 
"\102\105\107\111\116", "\105\116\104", "\104\105\106\111\116\111\124\111\117\116\123", 
"\111\115\120\117\122\124\123", "\106\122\117\115", "\105\130\120\117\122\124\123", 
"\117\102\112\105\103\124\55\124\131\120\105", "\123\131\116\124\101\130", "\123\124\101\124\125\123", 
"\104\105\123\103\122\111\120\124\111\117\116", "\122\105\106\105\122\105\116\103\105", "\111\116\104\105\130", 
"\104\105\106\126\101\114", "\104\111\123\120\114\101\131\55\110\111\116\124", 
"\111\115\120\114\111\105\104", "\124\105\130\124\125\101\114\55\103\117\116\126\105\116\124\111\117\116", 
"\115\117\104\125\114\105", "\115\101\116\104\101\124\117\122\131\55\107\122\117\125\120\123", 
"\107\122\117\125\120", "\117\102\112\105\103\124", "\127\122\111\124\105\55\123\131\116\124\101\130", 
"\117\102\112\105\103\124\123", "\101\125\107\115\105\116\124\123", 
"\115\117\104\125\114\105\55\111\104\105\116\124\111\124\131", "\114\101\123\124\55\125\120\104\101\124\105\104", 
"\117\122\107\101\116\111\132\101\124\111\117\116", "\103\117\116\124\101\103\124\55\111\116\106\117", 
"\122\105\126\111\123\111\117\116", "\116\117\124\111\106\111\103\101\124\111\117\116\55\124\131\120\105", 
"\117\102\112\105\103\124\55\111\104\105\116\124\111\124\131", "\115\101\130\55\101\103\103\105\123\123", 
"\115\111\116\55\101\103\103\105\123\123", "\125\116\111\124\123", "\124\122\101\120\55\124\131\120\105", 
"\105\116\124\105\122\120\122\111\123\105", "\126\101\122\111\101\102\114\105\123", "\101\103\103\105\123\123", 
"\103\110\117\111\103\105", "\111\115\120\114\111\103\111\124", 
"\101\120\120\114\111\103\101\124\111\117\116", "\117\102\112\105\103\124\55\107\122\117\125\120", 
"\116\117\124\111\106\111\103\101\124\111\117\116\55\107\122\117\125\120", "\116\117\124\111\106\111\103\101\124\111\117\116\123", 
"\115\117\104\125\114\105\55\103\117\115\120\114\111\101\116\103\105", "\101\107\105\116\124\55\103\101\120\101\102\111\114\111\124\111\105\123", 
"\115\101\103\122\117", null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "WithinASNComment", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0x3ffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x60L, 0x0L, 
};
static final long[] jjtoMore = {
   0x80L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[46];
private final int[] jjstateSet = new int[92];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public SMIParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SMIParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 46; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
}
