/* Generated By:JavaCC: Do not edit this line. SMIParser.java */
package pt.ipb.marser.smi;

import java.util.*;
import pt.ipb.snmp.SnmpConstants;
import pt.ipb.marser.*;
import java.io.File;

public class SMIParser implements SMIParserConstants {
  java.util.Vector vector = new java.util.Vector();
  java.util.ArrayList rootList = new java.util.ArrayList();

  String[] path;
  String fileName;
  String dir;

  public SMIParser(String fileName) throws java.io.FileNotFoundException {
    this(fileName, null);
  }

  public SMIParser(String fileName, String[] path) throws java.io.FileNotFoundException {
    this(new java.io.FileInputStream(fileName));

    this.path = path;
    File file = new File(fileName);
    this.fileName = file.getName();
    this.dir = file.getParent();
  }

  public java.util.Vector getMibModules() {
    return vector;
  }

  public MibModule getFirstMibModule() {
    if(vector.size()>0) {
      return (MibModule)vector.firstElement();
    }
    return null;
  }

  void connect(MibNode node, ArrayList list, int level, MibModule module) throws NumberFormatException, IllegalArgumentException {
    if(level==0) {
      return;
    }

    MibNode existingNode = module.getNode(node.getLabel());
    // A node with the same name already exists. We have to change it.
    if(existingNode!=null) {
      node = existingNode;
    }

    // Update the subid number to match. example: sysUpTimeInstance ::= { sysUpTime 0 }
    // the subid of sysUpTimeInstance will be '0'
    Object oid = list.get(level);
    // If oid is a number (1)
    if(oid instanceof String) {
      node.setSubId(Integer.parseInt((String)oid));
    // If oid is a name (dismanEventMIB) of a named number (internet(1))
    } else if(oid instanceof NamedNumber) {
      if(((NamedNumber)oid).getNumber()!=null)
        node.setSubId(((NamedNumber)oid).getInt());
    }

    // Retrieve the parent name. example: sysUpTimeInstance ::= { sysUpTime 0 }
    // the parent will be sysUpTime
    // If the parent also has a number like org(3), retrieve it.
    String parentName = null;
    int parentNumber = -1;
    Object parentOid = list.get(level-1);
    if(parentOid instanceof NamedNumber) {
      // If oid is a name (dismanEventMIB) of a named number (internet(1))
      parentName = ((NamedNumber)parentOid).getName();
      if("iso".equals(parentName)) {
        parentNumber = 1;
      } else {
        if(((NamedNumber)parentOid).getNumber()!=null)
          parentNumber = ((NamedNumber)parentOid).getInt();
      }
    } else if(parentOid instanceof String) {
      StringBuffer str = new StringBuffer();
      str.append("id-");
      for(int i=0; i<(level-1); i++) {
        String s = list.get(i).toString();
        str.append(s);
      }
      parentName = str.toString();
    }

    // The SMI is incorrect: it does not define the parent of the current node
    if(parentName==null) {
      throw new IllegalArgumentException(node.getLabel()+" without a parent.");
    }

    // Look for the eventual parent MibNode
    MibNode parent = module.getNode(parentName);

    if(parent==null) {
      parent = searchRoots(parentName);
      if(parent==null) {
        // It does not exist. Lookup imports
        parent = copyFromImports(module, parentName);
        if(parent==null) {
          // It does not exit. Create one
          parent = new MibNode(parentName, parentNumber);
        }
      }
    }

    // If the list of subOids continues, connect the other MibNodes
    connect(parent, list, level-1, module);
    parent.add(node);

    if(module.getRoot()==null)
      module.setRoot(parent);

    MibNode ancestor = parent.getAncestorMatching(module.getRoot());
    if(ancestor==null)
      ancestor = getAncestorMatching(parent);

    if(ancestor!=null) {
      module.setRoot(ancestor);
    } else {
      addRoot(parent);
    }

//System.out.println(node.toTagString()+"----- number of roots: "+rootList.size());
  }

  void rebuildAugmentsIndexes(ObjectType obj, MibModule module) {
    if(obj.augments()) {
      Vector augmentedIndexes = new Vector();
      for(Enumeration e=obj.indexes(); e.hasMoreElements(); ) {
        String augmentedEntry = (String)e.nextElement();
        // Look for the augmented entry MibNode
        MibNode entry = module.getNode(augmentedEntry);

        if(entry==null) {
          entry = searchRoots(augmentedEntry);
        }
        if(entry==null) {
          // It does not exist. Lookup imports
          entry = module.lookupImports(augmentedEntry);
          //entry = copyFromImports(module, augmentedEntry);
        }
        if(entry!=null) {
          // Copy the indexes to the augments entry
          for(Enumeration ae=((ObjectType)entry).indexes(); ae.hasMoreElements(); ) {
            String as = (String)ae.nextElement();
            augmentedIndexes.addElement(as);
          }
        }
      }
      obj.setIndexes(augmentedIndexes);
    }
  }

  MibNode getRoot() {
    if(rootList.isEmpty()) {
      return null;
    }
    return (MibNode)rootList.get(0);
  }

  void addRoot(MibNode root) {
    this.rootList.add(root);
  }

  MibNode searchRoots(String name) {
    for(Iterator i=rootList.iterator(); i.hasNext(); ) {
      MibNode root = (MibNode)i.next();
      try {
        // the first occurence in the existing tree.
        for(Enumeration e = root.getRoot().breadthFirstEnumeration(); e.hasMoreElements(); ) {
          MibNode node = (MibNode)e.nextElement();
          if(name.equals(node.getLabel())) {
            return node;
          }
        }
      } catch(Exception e) {
        //e.printStackTrace();
      }
    }
    return null;
  }

  MibNode getAncestorMatching(MibNode node) {
    for(Iterator i=rootList.iterator(); i.hasNext(); ) {
      MibNode mn1 = (MibNode)i.next();
      while(mn1!=null) {
        MibNode mn2 = node;
        while(mn2!=null) {
          if(mn1.getLabel().equals(mn2.getLabel())) {
            rootList.remove(mn1);
            return mn1;
          }
          mn2 = mn2.getParent();
        }
        mn1=mn1.getParent();
      }
    }
    return null;
  }

  MibNode copyFromImports(MibModule module, String parentName) {
    // Scanning imported modules' nodes until finding the parent node
    MibNode parent = module.lookupImports(parentName);

    // It does not exist in all the imports. We will have to create a new.
    if(parent==null) {
      parent = null;

    } else {
      // It exists in imports. Clone the hole path and add it to this module
      parent = (MibNode)parent.clonePath();
      // Search for a connection point:
      // where nodes from this module and from the parent path have the same name
      MibNode mn1 = parent;
      while(mn1!=null) {
        MibNode thisModuleNode = module.getNode(mn1.getLabel());
        if(thisModuleNode!=null) {
          // ok. it was found. Transfer all the children to the found node
          for(Enumeration e=mn1.children(); e.hasMoreElements(); ) {
            MibNode child = (MibNode)e.nextElement();
            thisModuleNode.add(child);
          }
          // Now it exists in this module
          parent = module.getNode(parentName);
          break;
        }
        mn1 = mn1.getParent();
      }
    }
    return parent;
  }

  public static java.util.Vector parse(String fileName) throws java.io.FileNotFoundException, MibException {
    SMIParser parser;
    if(fileName!=null) {
      try {
        parser = new SMIParser(fileName);
      } catch(Exception e) {
        //e.printStackTrace();
        throw new MibException("error: " + e.getMessage(), fileName);
      }
    } else {
      parser = new SMIParser(System.in);
    }
    try {
      System.out.println("Parsing file...");
      parser.parse();
      System.out.println("Done!");
    } catch(Exception e) {
      //e.printStackTrace();
      throw new MibException("error: " + e.getMessage(), fileName);
    }
    return parser.getMibModules();
  }

  public static void main(String args[]) {
    try {
      if(args.length==1) {
        parse(args[0]);
      } else {
        parse(null);
      }
    } catch(Exception e) {
      e.printStackTrace();
    }
  }

  String toDecimalString(String s) {
    if(s!=null && s.toLowerCase().endsWith("h")) {
      s = s.substring(1, s.length()-2);
      s = Long.getLong(s, 16).toString();
    }
    return s;
  }

  final public void parse() throws ParseException, MibException, java.io.FileNotFoundException {
  MibModule module;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UCASEFIRST_IDENT_TKN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      module = moduleDefinition();
                                vector.addElement(module);
    }
  }

/**
 * DISMAN-EXPRESSION-MIB DEFINITIONS ::= BEGIN
 *   moduleBody()
 * END
 */
  final public MibModule moduleDefinition() throws ParseException, java.io.FileNotFoundException, MibException {
  String moduleName;
  MibModule module;
    moduleName = moduleReference();
                                 module=new MibModule(dir+java.io.File.separator+fileName, path); module.setName(moduleName);
    jj_consume_token(DEFINITIONS_TKN);
    jj_consume_token(GETS_TKN);
    jj_consume_token(BEGIN_TKN);
    moduleBody(module);
    jj_consume_token(END_TKN);
    module.setName(moduleName);
    {if (true) return module;}
    throw new Error("Missing return statement in function");
  }

/**
 * DISMAN-EXPRESSION-MIB
 */
  final public String moduleReference() throws ParseException {
  Token x;
    x = jj_consume_token(UCASEFIRST_IDENT_TKN);
    {if (true) return x.image;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////
// Body
/////////////////////////////////////////////////////////

/**
 * imports()
 * assignmentList()
 */
  final public void moduleBody(MibModule module) throws ParseException, java.io.FileNotFoundException, MibException {
  MibImports importsObject = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXPORTS_TKN:
      exports(module);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORTS_TKN:
      importsObject = imports(module.getPath());
                                              module.setImports(importsObject);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER32_TKN:
    case IPADDRESS_TKN:
    case COUNTER32_TKN:
    case GAUGE32_TKN:
    case TIMETICKS_TKN:
    case OPAQUE_TKN:
    case COUNTER64_TKN:
    case UNSIGNED32_TKN:
    case OBJECT_TYPE_TKN:
    case TC_TKN:
    case MODULE_IDENTITY_TKN:
    case NOTIFICATION_TYPE_TKN:
    case OBJECT_IDENTITY_TKN:
    case TRAP_TYPE_TKN:
    case OBJECT_GROUP_TKN:
    case NOTIFICATION_GROUP_TKN:
    case MODULE_COMPLIANCE_TKN:
    case AGENT_CAPABILITIES_TKN:
    case LCASEFIRST_IDENT_TKN:
    case UCASEFIRST_IDENT_TKN:
      assignmentList(module);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

/////////////////////////////////////////////////////////
// Exports
/////////////////////////////////////////////////////////

/**
 * EXPORTS
 *   symbolsExported();
 */
  final public void exports(MibModule module) throws ParseException, java.io.FileNotFoundException, MibException {
  ArrayList list = null;
    jj_consume_token(EXPORTS_TKN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJECT_IDENTIFIER_TKN:
    case OCTET_STRING_TKN:
    case INTEGER32_TKN:
    case INTEGER_TKN:
    case BITS_TKN:
    case IPADDRESS_TKN:
    case COUNTER32_TKN:
    case GAUGE32_TKN:
    case TIMETICKS_TKN:
    case OPAQUE_TKN:
    case COUNTER64_TKN:
    case UNSIGNED32_TKN:
    case SEQUENCE_TKN:
    case OBJECT_TYPE_TKN:
    case TC_TKN:
    case MODULE_IDENTITY_TKN:
    case NOTIFICATION_TYPE_TKN:
    case OBJECT_IDENTITY_TKN:
    case TRAP_TYPE_TKN:
    case OBJECT_GROUP_TKN:
    case NOTIFICATION_GROUP_TKN:
    case MODULE_COMPLIANCE_TKN:
    case AGENT_CAPABILITIES_TKN:
    case LCASEFIRST_IDENT_TKN:
    case UCASEFIRST_IDENT_TKN:
      list = symbolList();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(SEMI_COLON_TKN);
    module.setExports(list);
  }

/////////////////////////////////////////////////////////
// Imports
/////////////////////////////////////////////////////////

/**
 * IMPORTS
 *   symbolsImported();
 */
  final public MibImports imports(String[] path) throws ParseException, java.io.FileNotFoundException, MibException {
  MibImports importsObject;
    jj_consume_token(IMPORTS_TKN);
                  importsObject=new MibImports(path);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJECT_IDENTIFIER_TKN:
    case OCTET_STRING_TKN:
    case INTEGER32_TKN:
    case INTEGER_TKN:
    case BITS_TKN:
    case IPADDRESS_TKN:
    case COUNTER32_TKN:
    case GAUGE32_TKN:
    case TIMETICKS_TKN:
    case OPAQUE_TKN:
    case COUNTER64_TKN:
    case UNSIGNED32_TKN:
    case SEQUENCE_TKN:
    case OBJECT_TYPE_TKN:
    case TC_TKN:
    case MODULE_IDENTITY_TKN:
    case NOTIFICATION_TYPE_TKN:
    case OBJECT_IDENTITY_TKN:
    case TRAP_TYPE_TKN:
    case OBJECT_GROUP_TKN:
    case NOTIFICATION_GROUP_TKN:
    case MODULE_COMPLIANCE_TKN:
    case AGENT_CAPABILITIES_TKN:
    case LCASEFIRST_IDENT_TKN:
    case UCASEFIRST_IDENT_TKN:
      symbolsImported(importsObject);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(SEMI_COLON_TKN);
    {if (true) return importsObject;}
    throw new Error("Missing return statement in function");
  }

  final public void symbolsImported(MibImports importsObject) throws ParseException, java.io.FileNotFoundException, MibException {
    symbolsFromModuleList(importsObject);
  }

/**
 * MODULE-IDENTITY, OBJECT-TYPE FROM SNMPv2-SMI
 * RowStatus FROM SNMPv2-TC
 */
  final public void symbolsFromModuleList(MibImports importsObject) throws ParseException, java.io.FileNotFoundException, MibException {
    symbolsFromModule(importsObject);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBJECT_IDENTIFIER_TKN:
      case OCTET_STRING_TKN:
      case INTEGER32_TKN:
      case INTEGER_TKN:
      case BITS_TKN:
      case IPADDRESS_TKN:
      case COUNTER32_TKN:
      case GAUGE32_TKN:
      case TIMETICKS_TKN:
      case OPAQUE_TKN:
      case COUNTER64_TKN:
      case UNSIGNED32_TKN:
      case SEQUENCE_TKN:
      case OBJECT_TYPE_TKN:
      case TC_TKN:
      case MODULE_IDENTITY_TKN:
      case NOTIFICATION_TYPE_TKN:
      case OBJECT_IDENTITY_TKN:
      case TRAP_TYPE_TKN:
      case OBJECT_GROUP_TKN:
      case NOTIFICATION_GROUP_TKN:
      case MODULE_COMPLIANCE_TKN:
      case AGENT_CAPABILITIES_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      symbolsFromModule(importsObject);
    }
  }

/**
 * MODULE-IDENTITY, OBJECT-TYPE FROM SNMPv2-SMI
 */
  final public void symbolsFromModule(MibImports importsObject) throws ParseException, java.io.FileNotFoundException, MibException {
  String module;
  ArrayList list;
    list = symbolList();
    jj_consume_token(FROM_TKN);
    module = moduleIdentifier();
    String[] symbols = new String[list.size()];
    symbols = (String[])list.toArray(symbols);
    importsObject.addImports(module, symbols);
  }

/**
 * MODULE-IDENTITY, OBJECT-TYPE
 */
  final public ArrayList symbolList() throws ParseException {
  ArrayList list = new ArrayList();
  String s;
    s = symbol();
               list.add(s);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA_TKN:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA_TKN);
      s = symbol();
                                                        list.add(s);
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

/**
 * MODULE-IDENTITY
 */
  final public String symbol() throws ParseException {
  String sym;
  Syntax s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UCASEFIRST_IDENT_TKN:
      sym = typeReference();
                        {if (true) return sym;}
      break;
    case LCASEFIRST_IDENT_TKN:
      sym = identifier();
                     {if (true) return sym;}
      break;
    case OBJECT_TYPE_TKN:
    case TC_TKN:
    case MODULE_IDENTITY_TKN:
    case NOTIFICATION_TYPE_TKN:
    case OBJECT_IDENTITY_TKN:
    case TRAP_TYPE_TKN:
    case OBJECT_GROUP_TKN:
    case NOTIFICATION_GROUP_TKN:
    case MODULE_COMPLIANCE_TKN:
    case AGENT_CAPABILITIES_TKN:
      sym = definedMacroName();
                           {if (true) return sym;}
      break;
    case OBJECT_IDENTIFIER_TKN:
    case OCTET_STRING_TKN:
    case INTEGER32_TKN:
    case INTEGER_TKN:
    case BITS_TKN:
    case IPADDRESS_TKN:
    case COUNTER32_TKN:
    case GAUGE32_TKN:
    case TIMETICKS_TKN:
    case OPAQUE_TKN:
    case COUNTER64_TKN:
    case UNSIGNED32_TKN:
    case SEQUENCE_TKN:
      s = builtinType();
                    {if (true) return s.toString();}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * RowStatus
 * Reference to types defined externaly.
 */
  final public String typeReference() throws ParseException {
  Token x;
    x = jj_consume_token(UCASEFIRST_IDENT_TKN);
                              {if (true) return x.image;}
    throw new Error("Missing return statement in function");
  }

/**
 * sysUpTime
 * Identifier of objects defined in another file.
 */
  final public String identifier() throws ParseException {
  Token x;
    x = jj_consume_token(LCASEFIRST_IDENT_TKN);
    {if (true) return x.image;}
    throw new Error("Missing return statement in function");
  }

/**
 * MODULE-IDENTITY
 * MACROS defined externaly.
 */
  final public String definedMacroName() throws ParseException {
  Token x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJECT_TYPE_TKN:
      x = jj_consume_token(OBJECT_TYPE_TKN);
                        {if (true) return x.image;}
      break;
    case TRAP_TYPE_TKN:
      x = jj_consume_token(TRAP_TYPE_TKN);
                      {if (true) return x.image;}
      break;
    case MODULE_IDENTITY_TKN:
      x = jj_consume_token(MODULE_IDENTITY_TKN);
                            {if (true) return x.image;}
      break;
    case OBJECT_IDENTITY_TKN:
      x = jj_consume_token(OBJECT_IDENTITY_TKN);
                            {if (true) return x.image;}
      break;
    case NOTIFICATION_TYPE_TKN:
      x = jj_consume_token(NOTIFICATION_TYPE_TKN);
                              {if (true) return x.image;}
      break;
    case TC_TKN:
      x = jj_consume_token(TC_TKN);
               {if (true) return x.image;}
      break;
    case OBJECT_GROUP_TKN:
      x = jj_consume_token(OBJECT_GROUP_TKN);
                         {if (true) return x.image;}
      break;
    case NOTIFICATION_GROUP_TKN:
      x = jj_consume_token(NOTIFICATION_GROUP_TKN);
                               {if (true) return x.image;}
      break;
    case MODULE_COMPLIANCE_TKN:
      x = jj_consume_token(MODULE_COMPLIANCE_TKN);
                              {if (true) return x.image;}
      break;
    case AGENT_CAPABILITIES_TKN:
      x = jj_consume_token(AGENT_CAPABILITIES_TKN);
                               {if (true) return x.image;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * INTEGER
 * ASN.1 and SNMP built in type (IpAddress, TimeTicks, INTEGER, ...)
 */
  final public Syntax builtinType() throws ParseException {
  Token x;
  Syntax s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER32_TKN:
    case INTEGER_TKN:
      s = integerType();
                    {if (true) return s;}
      break;
    case OCTET_STRING_TKN:
      x = jj_consume_token(OCTET_STRING_TKN);
                         s=new Syntax(SnmpConstants.OCTETSTRING, x.image); {if (true) return s;}
      break;
    case OBJECT_IDENTIFIER_TKN:
      x = jj_consume_token(OBJECT_IDENTIFIER_TKN);
                              s=new Syntax(SnmpConstants.OID, x.image); {if (true) return s;}
      break;
    case BITS_TKN:
      s = bitsType();
                 {if (true) return s;}
      break;
    case IPADDRESS_TKN:
      x = jj_consume_token(IPADDRESS_TKN);
                      s=new Syntax(SnmpConstants.IPADDRESS, x.image); {if (true) return s;}
      break;
    case COUNTER32_TKN:
      x = jj_consume_token(COUNTER32_TKN);
                      s=new Syntax(SnmpConstants.COUNTER32, x.image); {if (true) return s;}
      break;
    case GAUGE32_TKN:
      x = jj_consume_token(GAUGE32_TKN);
                    s=new Syntax(SnmpConstants.GAUGE32, x.image); {if (true) return s;}
      break;
    case TIMETICKS_TKN:
      x = jj_consume_token(TIMETICKS_TKN);
                      s=new Syntax(SnmpConstants.TIMETICKS, x.image); {if (true) return s;}
      break;
    case OPAQUE_TKN:
      x = jj_consume_token(OPAQUE_TKN);
                   s=new Syntax(SnmpConstants.OPAQUE, x.image); {if (true) return s;}
      break;
    case COUNTER64_TKN:
      x = jj_consume_token(COUNTER64_TKN);
                      s=new Syntax(SnmpConstants.COUNTER64, x.image); {if (true) return s;}
      break;
    case UNSIGNED32_TKN:
      s = unsigned32Type();
                       {if (true) return s;}
      break;
    default:
      jj_la1[10] = jj_gen;
      if (jj_2_1(2)) {
        s = sequenceOfType();
                                    {if (true) return s;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEQUENCE_TKN:
          s = sequenceType();
                     {if (true) return s;}
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * INTEGER { test(0), second(1) }
 * Integer32 and INTEGER types
 */
  final public Syntax integerType() throws ParseException {
  Token x;
  Syntax s;
  Enum enum = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_TKN:
      x = jj_consume_token(INTEGER_TKN);
                     s=new Syntax(SnmpConstants.INTEGER, x.image);
      break;
    case INTEGER32_TKN:
      x = jj_consume_token(INTEGER32_TKN);
                       s=new Syntax(SnmpConstants.INTEGER32, x.image);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTBRACE_TKN:
      jj_consume_token(LEFTBRACE_TKN);
      enum = namedNumberList();
      jj_consume_token(RIGHTBRACE_TKN);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    if(enum!=null) {
      s.setEnum(enum);
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Enum namedNumberList() throws ParseException {
  Enum enum = new Enum();
  Enum.Entry entry;
    entry = namedNumber();
                        enum.add(entry);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA_TKN:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA_TKN);
      entry = namedNumber();
                                                                              enum.add(entry);
    }
    {if (true) return enum;}
    throw new Error("Missing return statement in function");
  }

  final public Enum.Entry namedNumber() throws ParseException {
  String name;
  String number;
    name = identifier();
    jj_consume_token(LEFTPAREN_TKN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER_ERANGE_TKN:
    case NUMBER_TKN:
    case MINUS_TKN:
      number = signedNumber();
      break;
    case LCASEFIRST_IDENT_TKN:
    case UCASEFIRST_IDENT_TKN:
      number = definedValue();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RIGHTPAREN_TKN);
    {if (true) return new Enum.Entry(name, number);}
    throw new Error("Missing return statement in function");
  }

  final public String signedNumber() throws ParseException {
  Token x;
  StringBuffer str = new StringBuffer();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS_TKN:
      x = jj_consume_token(MINUS_TKN);
                    str.append(x.image);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER_TKN:
      x = jj_consume_token(NUMBER_TKN);
                                                                str.append(x.image);
      break;
    case NUMBER_ERANGE_TKN:
      x = jj_consume_token(NUMBER_ERANGE_TKN);
                                                                                                                 str.append(x.image);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return str.toString();}
    throw new Error("Missing return statement in function");
  }

/**
 * DISMAN-EXPRESSION-MIB.expExpression
 * A value defined in an external file.
 */
  final public String definedValue() throws ParseException {
  String s;
  Token x;
  StringBuffer str = new StringBuffer();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UCASEFIRST_IDENT_TKN:
      s = moduleReference();
      x = jj_consume_token(DOT_TKN);
                                     str.append(s); str.append(x.image);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    s = identifier();
                                                                                              str.append(s);
    {if (true) return str.toString();}
    throw new Error("Missing return statement in function");
  }

/**
 * BITS { existence(0), boolean(1), threshold(2) }
 * The BITS construct.
 */
  final public Syntax bitsType() throws ParseException {
  Token x;
  Syntax s;
  Enum enum = null;
    x = jj_consume_token(BITS_TKN);
                 s=new Syntax(SnmpConstants.BITS, x.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTBRACE_TKN:
      jj_consume_token(LEFTBRACE_TKN);
      enum = namedNumberList();
      jj_consume_token(RIGHTBRACE_TKN);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    if(enum!=null) {
      s.setEnum(enum);
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/**
 * Unsigned32
 * Unsigned32 type.
 */
  final public Syntax unsigned32Type() throws ParseException {
  Token x;
  Syntax s;
  Enum enum = null;
    x = jj_consume_token(UNSIGNED32_TKN);
                       s=new Syntax(SnmpConstants.UNSIGNED32, x.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTBRACE_TKN:
      jj_consume_token(LEFTBRACE_TKN);
      enum = namedNumberList();
      jj_consume_token(RIGHTBRACE_TKN);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    if(enum!=null) {
      s.setEnum(enum);
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/**
 * SEQUENCE OF some type
 */
  final public Syntax sequenceOfType() throws ParseException {
  Syntax s;
    jj_consume_token(SEQUENCE_TKN);
    jj_consume_token(OF_TKN);
    s = type();
    {if (true) return new Syntax(s, "SEQUENCE OF "+s.getDescription());}
    throw new Error("Missing return statement in function");
  }

/**
 * (Integer32 | MteTriggerDeltaEntry) (-1 | 1..600)
 */
  final public Syntax type() throws ParseException {
  Syntax s;
  Constraint c = null;
    if (jj_2_2(2)) {
      s = builtinType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UCASEFIRST_IDENT_TKN:
        s = definedType();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_3(2)) {
      c = subtypeSpec();
    } else {
      ;
    }
    if(c!=null) {
      s.setConstraint(c);
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/**
 * MteTriggerDeltaEntry
 */
  final public Syntax definedType() throws ParseException {
  String module,typeRef;
  StringBuffer str = new StringBuffer();
  Enum enum = null;
  Token x;
    if (jj_2_4(2)) {
      module = moduleReference();
      x = jj_consume_token(DOT_TKN);
                                                      str.append(module); str.append(x.image);
    } else {
      ;
    }
    typeRef = typeReference();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTBRACE_TKN:
      jj_consume_token(LEFTBRACE_TKN);
      enum = namedNumberList();
      jj_consume_token(RIGHTBRACE_TKN);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    str.append(typeRef);
    Syntax s = new Syntax(str.toString());
    if(enum!=null) {
      s.setEnum(enum);
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/**
 * (-1 | 1..600)
 */
  final public Constraint subtypeSpec() throws ParseException {
  Constraint c;
    jj_consume_token(LEFTPAREN_TKN);
    c = subtypeValueSetList();
    jj_consume_token(RIGHTPAREN_TKN);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

/**
 * -1 | 1..600
 */
  final public Constraint subtypeValueSetList() throws ParseException {
  Constraint c1 = null;
  Constraint c2 = null;
    c1 = subtypeValueSet();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BAR_TKN:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_5;
      }
      jj_consume_token(BAR_TKN);
      c2 = subtypeValueSet();
    }
    Constraint c = null;
    if(c1!=null && c2!=null) {
      c = new UnionConstraint(c1, c2);
    } else if(c1!=null) {
      c = c1;
    } else if(c2!=null) {
      c = c2;
    }
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

/**
 * -1 | 1..600 | FROM (-1 | 1..21) | SIZE (1..21)
 */
  final public Constraint subtypeValueSet() throws ParseException {
  Constraint c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BSTRING_TKN:
    case HSTRING_TKN:
    case CSTRING_TKN:
    case NUMBER_ERANGE_TKN:
    case NUMBER_TKN:
    case LEFTBRACE_TKN:
    case MINUS_TKN:
    case LCASEFIRST_IDENT_TKN:
    case UCASEFIRST_IDENT_TKN:
      c = valueRange();
      break;
    case FROM_TKN:
      c = permittedAlphabet();
      break;
    case SIZE_TKN:
      c = sizeConstraint();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

/**
 * 0..32
 */
  final public Constraint valueRange() throws ParseException {
  String value1 = null;
  String value2 = null;
  Constraint c = null;
    value1 = value();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT_TKN:
    case LESSTHAN_TKN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSTHAN_TKN:
        jj_consume_token(LESSTHAN_TKN);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(DOT_TKN);
      jj_consume_token(DOT_TKN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSTHAN_TKN:
        jj_consume_token(LESSTHAN_TKN);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      value2 = value();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    if(value2==null) {
      // Single value constraint
      if("MAX".equals((String)value1))
        c = new ValueConstraint(ValueConstraint.MAX);
      else
        c = new ValueConstraint(Long.parseLong(toDecimalString(value1)));

    } else {
      // Range constraint
      if("MAX".equals((String)value2))
        c = new RangeConstraint(Long.parseLong(toDecimalString(value1)), RangeConstraint.MAX);
      else
        c = new RangeConstraint(Long.parseLong(toDecimalString(value1)), Long.parseLong(toDecimalString(value2)));
    }
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

/**
 * -1 | "comment" | sysUpTime
 */
  final public String value() throws ParseException {
  String s;
  Object o;
    if (jj_2_5(2)) {
      o = builtinValue();
    if(o instanceof String) {if (true) return (String)o;}

    if(o instanceof ArrayList) {
      ArrayList list = (ArrayList)o;
      StringBuffer str = new StringBuffer();
      str.append("{");
      for(Iterator i=list.iterator(); i.hasNext(); ) {
        Object obj = i.next();
        str.append(" ");
        str.append(obj.toString());
      }
      str.append("}");
      {if (true) return str.toString();}
    }
    {if (true) return "";}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:
        s = definedValue();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Object builtinValue() throws ParseException {
  String s;
  Object o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER_ERANGE_TKN:
    case NUMBER_TKN:
    case MINUS_TKN:
      s = signedNumber();
                     {if (true) return s;}
      break;
    case HSTRING_TKN:
      s = hexString();
                  {if (true) return s;}
      break;
    case BSTRING_TKN:
      s = binaryString();
                     {if (true) return s;}
      break;
    case CSTRING_TKN:
      s = charString();
                   {if (true) return s;}
      break;
    case UCASEFIRST_IDENT_TKN:
      s = constant();
                 {if (true) return s;}
      break;
    case LEFTBRACE_TKN:
      o = compoundValue();
                      {if (true) return o;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * '0abc10'h
 */
  final public String hexString() throws ParseException {
  Token x;
    x = jj_consume_token(HSTRING_TKN);
    {if (true) return x.image;}
    throw new Error("Missing return statement in function");
  }

/**
 * '00110111'b
 */
  final public String binaryString() throws ParseException {
  Token x;
    x = jj_consume_token(BSTRING_TKN);
    {if (true) return x.image;}
    throw new Error("Missing return statement in function");
  }

/**
 * "comment"
 */
  final public String charString() throws ParseException {
  Token x;
    x = jj_consume_token(CSTRING_TKN);
    {if (true) return x.image;}
    throw new Error("Missing return statement in function");
  }

/**
 * MAX
 */
  final public String constant() throws ParseException {
  Token x;
    x = jj_consume_token(UCASEFIRST_IDENT_TKN);
    {if (true) return x.image;}
    throw new Error("Missing return statement in function");
  }

/**
 * { internet 1 }
 */
  final public ArrayList compoundValue() throws ParseException {
  ArrayList list = null;
    jj_consume_token(LEFTBRACE_TKN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER_ERANGE_TKN:
    case NUMBER_TKN:
    case LCASEFIRST_IDENT_TKN:
      list = objIdComponentList();
      break;
    default:
      jj_la1[30] = jj_gen;
      skip_to_matching_brace();
    }
    jj_consume_token(RIGHTBRACE_TKN);
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList objIdComponentList() throws ParseException {
  ArrayList list = new ArrayList();
  Object s;
    s = objIdComponent();
                       list.add(s);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER_ERANGE_TKN:
      case NUMBER_TKN:
      case LCASEFIRST_IDENT_TKN:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_6;
      }
      s = objIdComponent();
                                                            list.add(s);
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Object objIdComponent() throws ParseException {
  Object o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER_ERANGE_TKN:
    case NUMBER_TKN:
      o = numberForm();
      break;
    case LCASEFIRST_IDENT_TKN:
      o = nameAndNumberForm();
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public String numberForm() throws ParseException {
  String number;
    number = number();
    {if (true) return number;}
    throw new Error("Missing return statement in function");
  }

  final public String number() throws ParseException {
  Token x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER_TKN:
      x = jj_consume_token(NUMBER_TKN);
      break;
    case NUMBER_ERANGE_TKN:
      x = jj_consume_token(NUMBER_ERANGE_TKN);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return x.image;}
    throw new Error("Missing return statement in function");
  }

  final public NamedNumber nameAndNumberForm() throws ParseException {
  String name = null;
  String number = null;
    name = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTPAREN_TKN:
      jj_consume_token(LEFTPAREN_TKN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER_ERANGE_TKN:
      case NUMBER_TKN:
        number = number();
        break;
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:
        number = definedValue();
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RIGHTPAREN_TKN);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    {if (true) return new NamedNumber(name, number);}
    throw new Error("Missing return statement in function");
  }

  void skip_to_matching_brace() throws ParseException {
  Token tok;
  int nesting = 1;
  while (true) {
    tok = getToken(1);
    if (tok.kind == LEFTBRACE_TKN) nesting++;
    if (tok.kind == RIGHTBRACE_TKN) {
      nesting--;
         if (nesting == 0) break;
    }
    tok = getNextToken();
  }
  }

  final public Constraint permittedAlphabet() throws ParseException {
  Constraint c;
    jj_consume_token(FROM_TKN);
    c = subtypeSpec();
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

/**
 * SIZE (0..32)
 */
  final public Constraint sizeConstraint() throws ParseException {
  Constraint c;
    jj_consume_token(SIZE_TKN);
    c = subtypeSpec();
    {if (true) return new SizeConstraint(c);}
    throw new Error("Missing return statement in function");
  }

/**
 * SEQUENCE { elements() }
 */
/**
 * SEQUENCE { elements() }
 */
  final public Syntax sequenceType() throws ParseException {
  Sequence sequence = null;
  Syntax s;
  Token x;
    x = jj_consume_token(SEQUENCE_TKN);
    jj_consume_token(LEFTBRACE_TKN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJECT_IDENTIFIER_TKN:
    case OCTET_STRING_TKN:
    case INTEGER32_TKN:
    case INTEGER_TKN:
    case BITS_TKN:
    case IPADDRESS_TKN:
    case COUNTER32_TKN:
    case GAUGE32_TKN:
    case TIMETICKS_TKN:
    case OPAQUE_TKN:
    case COUNTER64_TKN:
    case UNSIGNED32_TKN:
    case SEQUENCE_TKN:
    case LCASEFIRST_IDENT_TKN:
    case UCASEFIRST_IDENT_TKN:
      sequence = elementTypeList();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(RIGHTBRACE_TKN);
    s = new Syntax();
    s.setSequence(sequence);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Sequence elementTypeList() throws ParseException {
  Sequence sequence = new Sequence();
  Sequence.Entry entry;
    entry = elementType();
                         sequence.add(entry);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA_TKN:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA_TKN);
      entry = elementType();
                                                                                   sequence.add(entry);
    }
    {if (true) return sequence;}
    throw new Error("Missing return statement in function");
  }

  final public Sequence.Entry elementType() throws ParseException {
  Sequence.Entry entry;
    //( namedType() [ (<OPTIONAL_TKN>) ] )
      entry = namedType();
    {if (true) return entry;}
    throw new Error("Missing return statement in function");
  }

/**
 * mteTriggerBooleanValue Integer32
 */
  final public Sequence.Entry namedType() throws ParseException {
  String name = null;
  Syntax s;
    if (jj_2_6(2)) {
      name = identifier();
    } else {
      ;
    }
    s = type();
    if(name==null) name="";
    {if (true) return new Sequence.Entry(name, s);}
    throw new Error("Missing return statement in function");
  }

/**
 * SNMPv2-SMI
 * The module where imports come from.
 */
  final public String moduleIdentifier() throws ParseException {
  String name;
    name = moduleReference();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTBRACE_TKN:
      assignIdentifier();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public void assignIdentifier() throws ParseException {
    objectIdentifierValue();
  }

/**
 * { mteTriggerBooleanTable 1 }
 */
  final public void objectIdentifierValue() throws ParseException {
    jj_consume_token(LEFTBRACE_TKN);
    objIdComponentList();
    jj_consume_token(RIGHTBRACE_TKN);
  }

/////////////////////////////////////////////////////////
// Assignments
/////////////////////////////////////////////////////////

/**
 * directory OBJECT IDENTIFIER ::= { internet 1 }
 * All that have the ::= symbol.
 */
  final public void assignmentList(MibModule module) throws ParseException, MibException {
    assignment(module);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI_COLON_TKN:
      jj_consume_token(SEMI_COLON_TKN);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER32_TKN:
      case IPADDRESS_TKN:
      case COUNTER32_TKN:
      case GAUGE32_TKN:
      case TIMETICKS_TKN:
      case OPAQUE_TKN:
      case COUNTER64_TKN:
      case UNSIGNED32_TKN:
      case OBJECT_TYPE_TKN:
      case TC_TKN:
      case MODULE_IDENTITY_TKN:
      case NOTIFICATION_TYPE_TKN:
      case OBJECT_IDENTITY_TKN:
      case TRAP_TYPE_TKN:
      case OBJECT_GROUP_TKN:
      case NOTIFICATION_GROUP_TKN:
      case MODULE_COMPLIANCE_TKN:
      case AGENT_CAPABILITIES_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_8;
      }
      assignment(module);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI_COLON_TKN:
        jj_consume_token(SEMI_COLON_TKN);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
    }
  }

  final public void assignment(MibModule module) throws ParseException, MibException {
    if (jj_2_7(2)) {
      macroDefinition(module);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER32_TKN:
      case IPADDRESS_TKN:
      case COUNTER32_TKN:
      case GAUGE32_TKN:
      case TIMETICKS_TKN:
      case OPAQUE_TKN:
      case COUNTER64_TKN:
      case UNSIGNED32_TKN:
      case UCASEFIRST_IDENT_TKN:
        typeAssignment(module);
        break;
      case LCASEFIRST_IDENT_TKN:
        valueAssignment(module);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
 * TEXTUAL-CONVENTION MACRO ::=
 *   BEGIN
 *     TYPE NOTATION ::=
 *       DisplayPart
 *       "STATUS" status
 * ...
 */
  final public void macroDefinition(MibModule module) throws ParseException {
    if (jj_2_8(2)) {
      jj_consume_token(TC_TKN);
    } else if (jj_2_9(2)) {
      jj_consume_token(OBJECT_TYPE_TKN);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBJECT_TYPE_TKN:
      case TC_TKN:
      case MODULE_IDENTITY_TKN:
      case NOTIFICATION_TYPE_TKN:
      case OBJECT_IDENTITY_TKN:
      case TRAP_TYPE_TKN:
      case OBJECT_GROUP_TKN:
      case NOTIFICATION_GROUP_TKN:
      case MODULE_COMPLIANCE_TKN:
      case AGENT_CAPABILITIES_TKN:
      case UCASEFIRST_IDENT_TKN:
        macroReference();
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(MACRO_TKN);
    jj_consume_token(GETS_TKN);
    jj_consume_token(BEGIN_TKN);
    macroBody();
    jj_consume_token(END_TKN);
  }

  void macroBody() throws ParseException {
  Token tok;
  int nesting = 1;
  while (true) {
    tok = getToken(1);
    if (tok.kind == END_TKN) {
        break;
    }
    tok = getNextToken();
  }
  }

/**
 * Url | TEXTUAL-CONVENTION
 */
  final public void macroReference() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UCASEFIRST_IDENT_TKN:
      typeReference();
      break;
    case OBJECT_TYPE_TKN:
    case TC_TKN:
    case MODULE_IDENTITY_TKN:
    case NOTIFICATION_TYPE_TKN:
    case OBJECT_IDENTITY_TKN:
    case TRAP_TYPE_TKN:
    case OBJECT_GROUP_TKN:
    case NOTIFICATION_GROUP_TKN:
    case MODULE_COMPLIANCE_TKN:
    case AGENT_CAPABILITIES_TKN:
      definedMacroName();
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * Url ::= TEXTUAL-CONVENTION
 *   DISPLAY-HINT "255a"
 *   STATUS Current
 *   DESCRIPTION "descr"
 *   SYNTAX OCTET STRING (SIZE(0..255))
 *
 * Assignment of types (start with upper case letter).
 */
  final public void typeAssignment(MibModule module) throws ParseException {
  String typeRef;
  Object macroOrType;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UCASEFIRST_IDENT_TKN:
      typeRef = typeReference();
      jj_consume_token(GETS_TKN);
      macroOrType = globalType(module);
    if(macroOrType instanceof Macro) {
      ((Macro)macroOrType).setLabel(typeRef);
    }
    if(macroOrType instanceof MibTC) {
      module.addMibTC((MibTC)macroOrType);

    } else if(macroOrType instanceof MibIdentity) {
      module.setIdentity((MibIdentity)macroOrType);
    }
      break;
    case UNSIGNED32_TKN:
      jj_consume_token(UNSIGNED32_TKN);
      jj_consume_token(GETS_TKN);
      macroOrType = globalType(module);
    if(macroOrType instanceof MibTC) {
      module.addMibTC((MibTC)macroOrType);
    }
      break;
    case GAUGE32_TKN:
      jj_consume_token(GAUGE32_TKN);
      jj_consume_token(GETS_TKN);
      macroOrType = globalType(module);
    if(macroOrType instanceof MibTC) {
      module.addMibTC((MibTC)macroOrType);
    }
      break;
    case IPADDRESS_TKN:
      jj_consume_token(IPADDRESS_TKN);
      jj_consume_token(GETS_TKN);
      macroOrType = globalType(module);
    if(macroOrType instanceof MibTC) {
      module.addMibTC((MibTC)macroOrType);
    }
      break;
    case INTEGER32_TKN:
      jj_consume_token(INTEGER32_TKN);
      jj_consume_token(GETS_TKN);
      macroOrType = globalType(module);
    if(macroOrType instanceof MibTC) {
      module.addMibTC((MibTC)macroOrType);
    }
      break;
    case TIMETICKS_TKN:
      jj_consume_token(TIMETICKS_TKN);
      jj_consume_token(GETS_TKN);
      macroOrType = globalType(module);
    if(macroOrType instanceof MibTC) {
      module.addMibTC((MibTC)macroOrType);
    }
      break;
    case COUNTER32_TKN:
      jj_consume_token(COUNTER32_TKN);
      jj_consume_token(GETS_TKN);
      macroOrType = globalType(module);
    if(macroOrType instanceof MibTC) {
      module.addMibTC((MibTC)macroOrType);
    }
      break;
    case COUNTER64_TKN:
      jj_consume_token(COUNTER64_TKN);
      jj_consume_token(GETS_TKN);
      macroOrType = globalType(module);
    if(macroOrType instanceof MibTC) {
      module.addMibTC((MibTC)macroOrType);
    }
      break;
    case OPAQUE_TKN:
      jj_consume_token(OPAQUE_TKN);
      jj_consume_token(GETS_TKN);
      macroOrType = globalType(module);
    if(macroOrType instanceof MibTC) {
      module.addMibTC((MibTC)macroOrType);
    }
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * ((Integer32 | MteTriggerDeltaEntry) (-1 | 1..600)) | TEXTUAL-CONVENTION ...
 */
  final public Object globalType(MibModule module) throws ParseException {
  Syntax s=null;
  Macro c=null;
    if (jj_2_10(2)) {
      s = type();
                          {if (true) return s;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTBRACKET_TKN:
      case OBJECT_TYPE_TKN:
      case TC_TKN:
      case MODULE_IDENTITY_TKN:
      case NOTIFICATION_TYPE_TKN:
      case OBJECT_IDENTITY_TKN:
      case TRAP_TYPE_TKN:
      case CHOICE_TKN:
      case OBJECT_GROUP_TKN:
      case NOTIFICATION_GROUP_TKN:
      case MODULE_COMPLIANCE_TKN:
        c = definedMacroType(module);
    {if (true) return c;}
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * TEXTUAL-CONVENTION
 *   DISPLAY-HINT "255a"
 *   STATUS Current
 *   DESCRIPTION "descr"
 *   SYNTAX OCTET STRING (SIZE(0..255))
 */
  final public Macro definedMacroType(MibModule module) throws ParseException {
  Macro c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE_IDENTITY_TKN:
      c = moduleIdentityMacroType();
                                 {if (true) return c;}
      break;
    case TC_TKN:
      c = textualConventionMacroType();
                                    {if (true) return c;}
      break;
    case OBJECT_TYPE_TKN:
      c = snmpObjectTypeMacroType(module);
                                       {if (true) return c;}
      break;
    case MODULE_COMPLIANCE_TKN:
      c = moduleComplianceMacroType();
                                   {if (true) return c;}
      break;
    case OBJECT_GROUP_TKN:
      c = objectGroupMacroType();
                              {if (true) return c;}
      break;
    case OBJECT_IDENTITY_TKN:
      c = objectIdentityMacroType();
                                 {if (true) return c;}
      break;
    case TRAP_TYPE_TKN:
      c = snmpTrapTypeMacroType();
                               {if (true) return c;}
      break;
    case NOTIFICATION_TYPE_TKN:
      c = notificationTypeMacroType();
                                   {if (true) return c;}
      break;
    case NOTIFICATION_GROUP_TKN:
      c = notificationGroupMacroType();
                                    {if (true) return c;}
      break;
    case CHOICE_TKN:
      c = choiceMacroType();
                         {if (true) return c;}
      break;
    case LEFTBRACKET_TKN:
      c = applicationMacroType();
                             {if (true) return c;}
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * MODULE-IDENTITY
 *   LAST-UPDATED "200010160000Z"
 *   ORGANIZATION "IETF"
 *   CONTACT-INFO "contact"
 *   DESCRIPTION "descr"
 *   REVISION "200010160000Z"
 *   DESCRIPTION "descr"
 */
  final public MibIdentity moduleIdentityMacroType() throws ParseException {
  String lastUpdated;
  String organization;
  String contactInfo;
  String descr;
  ArrayList list=null;
    jj_consume_token(MODULE_IDENTITY_TKN);
    lastUpdated = lastUpdated();
    organization = organization();
    contactInfo = contactInfo();
    descr = snmpDescrPart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REVISION_TKN:
      list = revisionPart();
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    MibIdentity id = new MibIdentity();
    id.setLastUpdated(lastUpdated);
    id.setOrganization(organization);
    id.setContactInfo(contactInfo);
    id.setDescription(descr);
    if(list!=null) {
      for(Iterator i=list.iterator(); i.hasNext(); ) {
        String rev = (String)i.next();
        id.addRevision(rev);
      }
    }
    {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public String lastUpdated() throws ParseException {
  String s;
    jj_consume_token(LAST_UPDATED_TKN);
    s = charString();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String organization() throws ParseException {
  String s;
    jj_consume_token(ORGANIZATION_TKN);
    s = charString();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String contactInfo() throws ParseException {
  String s;
    jj_consume_token(CONTACT_INFO_TKN);
    s = charString();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList revisionPart() throws ParseException {
  ArrayList list = new ArrayList();
  String s;
    s = revision();
                 list.add(s);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REVISION_TKN:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_9;
      }
      s = revision();
                                                list.add(s);
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public String revision() throws ParseException {
  String s;
  StringBuffer str = new StringBuffer();
    jj_consume_token(REVISION_TKN);
    s = charString();
                                  str.append(s); str.append(" - ");
    s = snmpDescrPart();
                                                                                          str.append(s);
    {if (true) return str.toString();}
    throw new Error("Missing return statement in function");
  }

/**
 * TEXTUAL-CONVENTION
 *   DISPLAY-HINT "255a"
 *   STATUS Current
 *   DESCRIPTION "descr"
 *   SYNTAX OCTET STRING (SIZE(0..255))
 */
  final public MibTC textualConventionMacroType() throws ParseException {
  String display="";
  String status;
  String descr="";
  String ref="";
  Syntax s;
    jj_consume_token(TC_TKN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DHINT_TKN:
      display = displayHint();
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    jj_consume_token(STATUS_TKN);
    status = snmpStatus();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DESCRIPTION_TKN:
      descr = snmpDescrPart();
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REFERENCE_TKN:
      ref = snmpReferPart();
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    jj_consume_token(SYNTAX_TKN);
    s = type();
    MibTC tc = new MibTC();
    tc.setDisplayHint(display);
    tc.setStatus(status);
    tc.setDescription(descr);
    tc.setReference(ref);
    tc.setSyntax(s);
    {if (true) return tc;}
    throw new Error("Missing return statement in function");
  }

  final public String displayHint() throws ParseException {
  String s;
    jj_consume_token(DHINT_TKN);
    s = charString();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/**
 * current
 */
  final public String snmpStatus() throws ParseException {
  String s;
    s = identifier();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/**
 * DESCRIPTION "descr"
 */
  final public String snmpDescrPart() throws ParseException {
  String s;
    jj_consume_token(DESCRIPTION_TKN);
    s = charString();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/**
 * REFERENCE "ref"
 */
  final public String snmpReferPart() throws ParseException {
  String s;
    jj_consume_token(REFERENCE_TKN);
    s = charString();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/**
 * OBJECT-TYPE
 *   SYNTAX Integer32 (-1 | 1..600)
 *   MAX-ACCESS read-write
 *   STATUS current
 */
  final public ObjectType snmpObjectTypeMacroType(MibModule module) throws ParseException {
  ObjectType obj = new ObjectType();
  Syntax s;
  String units="";
  String access;
  String status;
  String descr="";
  String ref="";
  String defval="";
    jj_consume_token(OBJECT_TYPE_TKN);
    jj_consume_token(SYNTAX_TKN);
    s = type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNITS_TKN:
      units = units();
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    access = snmpAccess();
    jj_consume_token(STATUS_TKN);
    status = snmpStatus();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DESCRIPTION_TKN:
      descr = snmpDescrPart();
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REFERENCE_TKN:
      ref = snmpReferPart();
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INDEX_TKN:
    case AUGMENTS_TKN:
      snmpIndexPart(obj, module);
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFVAL_TKN:
      defval = snmpDefValPart();
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    obj.setSyntax(s);
    obj.setUnits(units);
    obj.setAccess(access);
    obj.setStatus(status);
    obj.setDescription(descr);
    obj.setReference(ref);
    obj.setDefVal(defval);
    {if (true) return obj;}
    throw new Error("Missing return statement in function");
  }

  final public String units() throws ParseException {
  String s;
    jj_consume_token(UNITS_TKN);
    s = charString();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/**
 * MAX-ACCESS read-write
 */
  final public String snmpAccess() throws ParseException {
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACCESS_TKN:
      jj_consume_token(ACCESS_TKN);
      break;
    case MAX_ACCESS_TKN:
      jj_consume_token(MAX_ACCESS_TKN);
      break;
    case MIN_ACCESS_TKN:
      jj_consume_token(MIN_ACCESS_TKN);
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    s = identifier();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/**
 * INDEX { expExpressionOwner, expExpressionName }
 */
  final public void snmpIndexPart(ObjectType obj, MibModule module) throws ParseException {
  Token x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INDEX_TKN:
      x = jj_consume_token(INDEX_TKN);
      break;
    case AUGMENTS_TKN:
      x = jj_consume_token(AUGMENTS_TKN);
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LEFTBRACE_TKN);
    typeOrValueList(obj);
    jj_consume_token(RIGHTBRACE_TKN);
    obj.setAugments(x.kind==SMIParserConstants.AUGMENTS_TKN);
    rebuildAugmentsIndexes(obj, module);
  }

/**
 * expExpressionOwner, expExpressionName
 */
  final public void typeOrValueList(ObjectType obj) throws ParseException {
    typeOrValue(obj);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA_TKN:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA_TKN);
      typeOrValue(obj);
    }
  }

/**
 * expExpressionOwner
 */
  final public void typeOrValue(ObjectType obj) throws ParseException {
  String s;
  MibNode indexNode;
    if (jj_2_11(3)) {
      type();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BSTRING_TKN:
      case HSTRING_TKN:
      case CSTRING_TKN:
      case NUMBER_ERANGE_TKN:
      case NUMBER_TKN:
      case LEFTBRACE_TKN:
      case MINUS_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:
        s = value();
    obj.addIndex(s);
        break;
      case IMPLIED_TKN:
        s = impliedValue();
    obj.addImpliedIndex(s);
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public String impliedValue() throws ParseException {
  String s;
    jj_consume_token(IMPLIED_TKN);
    s = value();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/**
 * DEFVAL { Counter32 }
 */
  final public String snmpDefValPart() throws ParseException {
  String s="";
    jj_consume_token(DEFVAL_TKN);
    jj_consume_token(LEFTBRACE_TKN);
    if (jj_2_12(3)) {
      s = value();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTBRACE_TKN:
        s = bitsValue();
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
    }
    jj_consume_token(RIGHTBRACE_TKN);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String bitsValue() throws ParseException {
  StringBuffer str = new StringBuffer();
  ArrayList list = null;
    jj_consume_token(LEFTBRACE_TKN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCASEFIRST_IDENT_TKN:
      list = bitNames();
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    jj_consume_token(RIGHTBRACE_TKN);
    str.append("{ ");
    if(list!=null) {
      for(Iterator i=list.iterator(); i.hasNext(); ) {
        String s = (String)i.next();
        str.append(s);
        if(i.hasNext()) {
          str.append(", ");
        }
      }
    }
    str.append(" }");
    {if (true) return str.toString();}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList bitNames() throws ParseException {
  ArrayList list = new ArrayList();
  String s;
    s = identifier();
                   list.add(s);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA_TKN:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA_TKN);
      identifier();
                                                              list.add(s);
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

/**
 * MODULE-COMPLIANCE
 *   STATUS current
 *   DESCRIPTION "descr"
 *   REFERENCE "ref"
 *   MODULE 
 *   ...
 */
  final public MibCompliance moduleComplianceMacroType() throws ParseException {
  String status;
  String descr;
  String ref="";
  MibCompliance c = new MibCompliance();
  ArrayList list;
    jj_consume_token(MODULE_COMPLIANCE_TKN);
    jj_consume_token(STATUS_TKN);
    status = snmpStatus();
    descr = snmpDescrPart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REFERENCE_TKN:
      ref = snmpReferPart();
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
    list = modulePart();
    c.setStatus(status);
    c.setDescription(descr);
    c.setReference(ref);
    for(Iterator i=list.iterator(); i.hasNext(); ) {
      ComplianceModule module = (ComplianceModule)i.next();
      c.addObject(module);
    }
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList modulePart() throws ParseException {
  ArrayList list = new ArrayList();
  ComplianceModule module;
    module = module();
                    list.add(module);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULE_TKN:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_12;
      }
      module = module();
                                                           list.add(module);
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ComplianceModule module() throws ParseException {
  ComplianceModule module = new ComplianceModule();
  String mName="";
    jj_consume_token(MODULE_TKN);
    if (jj_2_13(2)) {
      mName = moduleReference();
    } else {
      ;
    }
    if (jj_2_14(2)) {
      mandatoryPart(module);
    } else {
      ;
    }
    if (jj_2_15(2)) {
      compliancePart(module);
    } else {
      ;
    }
    module.setModuleId(mName);
    {if (true) return module;}
    throw new Error("Missing return statement in function");
  }

  final public void mandatoryPart(ComplianceModule module) throws ParseException {
  ArrayList list;
    jj_consume_token(MANDATORY_GROUPS_TKN);
    jj_consume_token(LEFTBRACE_TKN);
    list = groups();
    jj_consume_token(RIGHTBRACE_TKN);
    for(Iterator i=list.iterator(); i.hasNext(); ) {
      String grp = (String)i.next();
      module.addGroup(grp);
    }
  }

  final public ArrayList groups() throws ParseException {
  ArrayList list = new ArrayList();
  String s;
    s = group();
              list.add(s);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA_TKN:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA_TKN);
      group();
                                                    list.add(s);
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public String group() throws ParseException {
  String s;
    s = value();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public void compliancePart(ComplianceModule module) throws ParseException {
    compliance(module);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP_TKN:
      case OBJECT_TKN:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_14;
      }
      compliance(module);
    }
  }

  final public void compliance(ComplianceModule module) throws ParseException {
  String s1, s2;
  Syntax s=null, ws=null;
  String s3="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUP_TKN:
      jj_consume_token(GROUP_TKN);
      s1 = value();
      s2 = snmpDescrPart();
    ComplianceGroup grp = new ComplianceGroup(s1);
    grp.setDescription(s2);
    module.addComplianceGroup(grp);
      break;
    case OBJECT_TKN:
      jj_consume_token(OBJECT_TKN);
      s1 = value();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYNTAX_TKN:
        jj_consume_token(SYNTAX_TKN);
        s = type();
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WRITE_SYNTAX_TKN:
        jj_consume_token(WRITE_SYNTAX_TKN);
        ws = type();
        break;
      default:
        jj_la1[70] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAX_ACCESS_TKN:
      case MIN_ACCESS_TKN:
      case ACCESS_TKN:
        s3 = snmpAccess();
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      s2 = snmpDescrPart();
    ComplianceObject obj = new ComplianceObject(s1);
    obj.setSyntax(s);
    obj.setWriteSyntax(ws);
    obj.setAccess(s3);
    obj.setDescription(s2);
    module.addComplianceObject(obj);
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * OBJECT-GROUP
 *   OBJECTS { ... }
 *   STATUS current
 *   DESCRIPTION "descr"
 *   REFERENCE "ref"
 */
  final public ObjectGroup objectGroupMacroType() throws ParseException {
  ArrayList list=null;
  String status;
  String descr;
  String ref="";
    jj_consume_token(OBJECT_GROUP_TKN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJECTS_TKN:
      list = objects();
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    jj_consume_token(STATUS_TKN);
    status = snmpStatus();
    descr = snmpDescrPart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REFERENCE_TKN:
      ref = snmpReferPart();
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    ObjectGroup group = new ObjectGroup();
    if(list!=null) {
      for(Iterator i=list.iterator(); i.hasNext(); ) {
        String obj = (String)i.next();
        group.addObject(obj);
      }
    }
    group.setStatus(status);
    group.setDescription(descr);
    group.setReference(ref);
    {if (true) return group;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList objects() throws ParseException {
  ArrayList list;
    jj_consume_token(OBJECTS_TKN);
    jj_consume_token(LEFTBRACE_TKN);
    list = objs();
    jj_consume_token(RIGHTBRACE_TKN);
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList objs() throws ParseException {
  ArrayList list = new ArrayList();
  String obj;
    obj = obj();
              list.add(obj);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA_TKN:
        ;
        break;
      default:
        jj_la1[75] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMMA_TKN);
      obj = obj();
                                                        list.add(obj);
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public String obj() throws ParseException {
  String s;
    s = value();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/**
 * TRAP-TYPE
 *   ENTERPRISE snmp
 *   VARIABLES { egpNeighAddr }
 *   DESCRIPTION "descr"
 *   REFERENCE "ref"
 */
  final public MibTrap snmpTrapTypeMacroType() throws ParseException {
  String s;
  ArrayList list=null;
  String descr="";
  String ref="";
    jj_consume_token(TRAP_TYPE_TKN);
    jj_consume_token(ENTERPRISE_TKN);
    s = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLES_TKN:
      list = trapVariables();
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DESCRIPTION_TKN:
      descr = snmpDescrPart();
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REFERENCE_TKN:
      ref = snmpReferPart();
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    MibTrap trap = new MibTrap();
    trap.setEnterpriseLabel(s);
    if(list!=null) {
      for(Iterator i=list.iterator(); i.hasNext(); ) {
        String var = (String)i.next();
        trap.addVar(var);
      }
    }
    trap.setDescription(descr);
    trap.setReference(ref);
    {if (true) return trap;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList trapVariables() throws ParseException {
  ArrayList list;
    jj_consume_token(VARIABLES_TKN);
    jj_consume_token(LEFTBRACE_TKN);
    list = symbolList();
    jj_consume_token(RIGHTBRACE_TKN);
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

/**
 * NOTIFICATION-TYPE
 *   OBJECTS { ... }
 *   STATUS current
 *   DESCRIPTION "descr"
 *   REFERENCE "ref"
 */
  final public NotificationType notificationTypeMacroType() throws ParseException {
  ArrayList list=null;
  String status;
  String descr;
  String ref="";
    jj_consume_token(NOTIFICATION_TYPE_TKN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJECTS_TKN:
      list = objects();
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    jj_consume_token(STATUS_TKN);
    status = snmpStatus();
    descr = snmpDescrPart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REFERENCE_TKN:
      ref = snmpReferPart();
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
    NotificationType not = new NotificationType();
    if(list!=null) {
      for(Iterator i=list.iterator(); i.hasNext(); ) {
        String obj = (String)i.next();
        not.addObject(obj);
      }
    }
    not.setStatus(status);
    not.setDescription(descr);
    not.setReference(ref);
    {if (true) return not;}
    throw new Error("Missing return statement in function");
  }

/**
 * NOTIFICATION-GROUP
 *   NOTIFICATIONS { ... }
 *   STATUS current
 *   DESCRIPTION "descr"
 *   REFERENCE "ref"
 */
  final public NotificationGroup notificationGroupMacroType() throws ParseException {
  ArrayList list=null;
  String status;
  String descr;
  String ref="";
    jj_consume_token(NOTIFICATION_GROUP_TKN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOTIFICATIONS_TKN:
      list = notifications();
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    jj_consume_token(STATUS_TKN);
    status = snmpStatus();
    descr = snmpDescrPart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REFERENCE_TKN:
      ref = snmpReferPart();
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
    NotificationGroup not = new NotificationGroup();
    if(list!=null) {
      for(Iterator i=list.iterator(); i.hasNext(); ) {
        String obj = (String)i.next();
        not.addNotification(obj);
      }
    }
    not.setStatus(status);
    not.setDescription(descr);
    not.setReference(ref);
    {if (true) return not;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList notifications() throws ParseException {
  ArrayList list;
    jj_consume_token(NOTIFICATIONS_TKN);
    jj_consume_token(LEFTBRACE_TKN);
    list = objs();
    jj_consume_token(RIGHTBRACE_TKN);
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

/**
 * CHOICE {
 *   simple
 *     SimpleSyntax,
 *   application-wide
 *   ApplicationSyntax
 * }
 */
  final public Choice choiceMacroType() throws ParseException {
  ArrayList list=null;
    jj_consume_token(CHOICE_TKN);
    jj_consume_token(LEFTBRACE_TKN);
    list = choices();
    jj_consume_token(RIGHTBRACE_TKN);
    Choice c = new Choice();
    c.setChoiceList(list);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList choices() throws ParseException {
  ArrayList list = new ArrayList();
  Choice.Entry obj;
    obj = choice();
                 list.add(obj);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA_TKN:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_16;
      }
      jj_consume_token(COMMA_TKN);
      obj = choice();
                                                              list.add(obj);
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Choice.Entry choice() throws ParseException {
  String s;
  Syntax t;
    s = identifier();
    t = type();
    {if (true) return new Choice.Entry(s, t);}
    throw new Error("Missing return statement in function");
  }

/**
 * [APPLICATION 3]
 *   IMPLICIT INTEGER (0..4294967295)
 */
  final public Macro applicationMacroType() throws ParseException {
  String s;
  Syntax syntax;
    jj_consume_token(LEFTBRACKET_TKN);
    jj_consume_token(APPLICATION_TKN);
    s = number();
    jj_consume_token(RIGHTBRACKET_TKN);
    jj_consume_token(IMPLICIT_TKN);
    syntax = type();
    Macro m = new Macro();
    m.setDescription(new String("[APPLICATION "+s+"] IMPLICIT "+syntax));
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/**
 * OBJECT-IDENTITY
 *   STATUS current
 *   DESCRIPTION "descr"
 *   REFERENCE "ref"
 */
  final public ObjectIdentity objectIdentityMacroType() throws ParseException {
  String status;
  String descr;
  String ref="";
    jj_consume_token(OBJECT_IDENTITY_TKN);
    jj_consume_token(STATUS_TKN);
    status = snmpStatus();
    descr = snmpDescrPart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REFERENCE_TKN:
      ref = snmpReferPart();
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
    ObjectIdentity id = new ObjectIdentity();
    id.setStatus(status);
    id.setDescription(descr);
    id.setReference(ref);
    {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

/**
 * mgmt OBJECT IDENTIFIER ::= { iso org(3) dod(6) internet(1) mgmt(2) }
 */
  final public void valueAssignment(MibModule module) throws ParseException, MibException {
  String id;
  Object macroOrType;
  Object value=null;
  MibNode node=null;
  Token x;
    id = identifier();
    macroOrType = globalType(module);
    x = jj_consume_token(GETS_TKN);
    if (jj_2_16(2)) {
      identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECTOR_TKN:
        jj_consume_token(SELECTOR_TKN);
        break;
      default:
        jj_la1[85] = jj_gen;
        ;
      }
    } else {
      ;
    }
    if (jj_2_17(2)) {
      value = builtinValue();
    } else {
      ;
    }
    if(macroOrType instanceof Macro) {
      ((Macro)macroOrType).setLabel(id);
      ((Macro)macroOrType).setModule(module);
    }
    if(macroOrType instanceof MibNode) {
      node = (MibNode)macroOrType;
    }

    if(macroOrType instanceof MibTC) {
      module.addMibTC((MibTC)macroOrType);

    } else if(macroOrType instanceof MibTrap) {
      MibTrap trap = (MibTrap)macroOrType;
      trap.setLabel(id);
      MibNode enterpriseNode = module.getNode(trap.getEnterpriseLabel());
      trap.setEnterprise(enterpriseNode.getOID());
      try {
        trap.setNumber((String)value);
      } catch(NumberFormatException e) {
        {if (true) throw new MibException(e.getMessage(), fileName, id, x.beginLine, x.beginColumn);}
      }
      module.addMibTrap((MibTrap)macroOrType);

    } else if(macroOrType instanceof MibIdentity) {
      module.setIdentity((MibIdentity)macroOrType);
      //module.setRoot((MibIdentity)macroOrType);
    }

    if(macroOrType instanceof Syntax) {
      Syntax s = (Syntax)macroOrType;
      node = new MibNode();
      node.setLabel(id);
    }

    // If the Macro corresponds to some OID based object
    if(node!=null) {

      // If o is ArrayList is of the form { dismanEventMIB 1 }
      if(value instanceof ArrayList) {
        ArrayList list = (ArrayList)value;
        int level = list.size()-1;
        try {
          connect(node, list, level, module);
        } catch(Exception e) {
          //e.printStackTrace();
          {if (true) throw new MibException(e.getMessage(), fileName, macroOrType.toString(), x.beginLine, x.beginColumn);}
        }
      }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_3R_110() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    return false;
  }

  final private boolean jj_3R_79() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(OBJECT_TKN)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(GROUP_TKN)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(INTEGER32_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(INTEGER_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(TC_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    if (jj_scan_token(MACRO_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(COUNTER64_TKN)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(OPAQUE_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_110()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(UCASEFIRST_IDENT_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(TIMETICKS_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(GAUGE32_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(COUNTER32_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(IPADDRESS_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(OBJECT_IDENTIFIER_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(LEFTPAREN_TKN)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(OCTET_STRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    if (jj_scan_token(RIGHTBRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(MANDATORY_GROUPS_TKN)) return true;
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(AGENT_CAPABILITIES_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(MODULE_COMPLIANCE_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(NOTIFICATION_GROUP_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(OBJECT_GROUP_TKN)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(DOT_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(TC_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(NOTIFICATION_TYPE_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(UCASEFIRST_IDENT_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(OBJECT_IDENTITY_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(MODULE_IDENTITY_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(TRAP_TYPE_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(OBJECT_TYPE_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(CSTRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(NUMBER_ERANGE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(LCASEFIRST_IDENT_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(BSTRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(UCASEFIRST_IDENT_TKN)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(SEQUENCE_TKN)) return true;
    if (jj_scan_token(OF_TKN)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(HSTRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(UNSIGNED32_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(NUMBER_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(SEQUENCE_TKN)) return true;
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTBRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(BITS_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(SIZE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(DOT_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(FROM_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(LEFTPAREN_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(MINUS_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(OBJECT_TYPE_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_24()) return true;
    return false;
  }

  public SMIParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[86];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x20000000,0xe0000300,0xe0000300,0xe0000300,0x10000,0xe0000300,0x0,0xe0000300,0x0,0x60000000,0x20000,0x10000,0x1006000,0x1000000,0x6000,0x0,0x20000,0x20000,0x0,0x20000,0x4000000,0x1027c00,0x800000,0x800000,0x808000,0x0,0x1027c00,0x6000,0x6000,0x6000,0x6000,0x6000,0x80000,0xe0000300,0x10000,0x20000,0x8000000,0x20000000,0x8000000,0x20000000,0x0,0x0,0x20000000,0x200000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x1027c00,0x20000,0x0,0x10000,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x10000000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x8000,0x2000,0x201007f,0x20100ff,0x20100ff,0x20100ff,0x0,0x20100ff,0x2010000,0x7f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x201007f,0x0,0x7f,0x2010000,0x2010000,0x7f,0x2010000,0x2010000,0x0,0x0,0x800000,0x80000,0x100000,0x0,0x80000,0x100000,0x200000,0x400000,0x0,0x200000,0x0,0x1000000,0x0,0x0,0x0,0x100000,0x4000000,0x0,0x30000000,0x20000,0x40000000,0x0,0x30000000,0x80000000,0x100000,0x0,0x0,0x80000,0x100000,0x80000000,0x100000,0x0,0x100000,0x0,0x100000,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x2000000,0x0,0x0,0x36c08c2,0x36c08c2,0x36c08c2,0x36c08c2,0x0,0x36c08c2,0x6c08c2,0x0,0x0,0x0,0x0,0x0,0x3000000,0x0,0x0,0x2000000,0x0,0x0,0x2000000,0x0,0x0,0x3000000,0x0,0x0,0x0,0x3000000,0x2000000,0x1000000,0x1000000,0x1000000,0x0,0x3000000,0x0,0x3000000,0x0,0x0,0x0,0x36c08c2,0x0,0x3000000,0x26c08c2,0x26c08c2,0x2000000,0x2c88c2,0x2c88c2,0x20,0x20,0x0,0x0,0x0,0x400,0x0,0x0,0x1,0x0,0x4300,0x1,0x0,0x3000000,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4300,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[17];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public SMIParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SMIParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SMIParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SMIParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SMIParser(SMIParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(SMIParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[90];
    for (int i = 0; i < 90; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 86; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 90; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 17; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class NamedNumber {

  String name;
  String number;

  public NamedNumber(String name, String number) {
    this.name = name;
    this.number = number;
  }

  public String getName() {
    return name;
  }

  public String getNumber() {
    return number;
  }

  public int getInt() throws NumberFormatException {
    return Integer.parseInt(number);
  }

  public String toString() {
    StringBuffer str = new StringBuffer();
    str.append(name);
    if(number!=null) {
      str.append("(");
      str.append(number);
      str.append(")");
    }
    return str.toString();
  }

}
